
unit7_L2_section.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000304  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000304  00000378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  000003f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b1e  00000000  00000000  00000494  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000721  00000000  00000000  00000fb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006aa  00000000  00000000  000016d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000110  00000000  00000000  00001d80  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000427  00000000  00000000  00001e90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000040a  00000000  00000000  000022b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  000026c1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e0       	ldi	r30, 0x04	; 4
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 6f 01 	call	0x2de	; 0x2de <main>
  7a:	0c 94 80 01 	jmp	0x300	; 0x300 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <keypad_init>:
int keypad_col[] = {C0, C1, C2, C3};
	
void keypad_init()
{
	//0. enable PORTD
	KEYPAD_PORT = 0xFF;
  82:	8f ef       	ldi	r24, 0xFF	; 255
  84:	82 bb       	out	0x12, r24	; 18
	//1. initialize C' pins as output
	KEYPAD_DDR = 0xF0;
  86:	80 ef       	ldi	r24, 0xF0	; 240
  88:	81 bb       	out	0x11, r24	; 17
  8a:	08 95       	ret

0000008c <keypad_get_key>:

char keypad_get_key()
{
	int i,j;
	//loop for output
	for(i=0; i<4; i++)
  8c:	40 e0       	ldi	r20, 0x00	; 0
  8e:	50 e0       	ldi	r21, 0x00	; 0
  90:	90 c0       	rjmp	.+288    	; 0x1b2 <keypad_get_key+0x126>
	{
		//0. make sure that all col ports are ON
		for(int k=0; k<4; k++)
			SET_BIT(KEYPAD_PORT, keypad_col[k]);
  92:	62 b3       	in	r22, 0x12	; 18
  94:	f9 01       	movw	r30, r18
  96:	ee 0f       	add	r30, r30
  98:	ff 1f       	adc	r31, r31
  9a:	e0 5a       	subi	r30, 0xA0	; 160
  9c:	ff 4f       	sbci	r31, 0xFF	; 255
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	00 80       	ld	r0, Z
  a4:	02 c0       	rjmp	.+4      	; 0xaa <keypad_get_key+0x1e>
  a6:	88 0f       	add	r24, r24
  a8:	99 1f       	adc	r25, r25
  aa:	0a 94       	dec	r0
  ac:	e2 f7       	brpl	.-8      	; 0xa6 <keypad_get_key+0x1a>
  ae:	86 2b       	or	r24, r22
  b0:	82 bb       	out	0x12, r24	; 18
	int i,j;
	//loop for output
	for(i=0; i<4; i++)
	{
		//0. make sure that all col ports are ON
		for(int k=0; k<4; k++)
  b2:	2f 5f       	subi	r18, 0xFF	; 255
  b4:	3f 4f       	sbci	r19, 0xFF	; 255
  b6:	02 c0       	rjmp	.+4      	; 0xbc <keypad_get_key+0x30>
  b8:	20 e0       	ldi	r18, 0x00	; 0
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	24 30       	cpi	r18, 0x04	; 4
  be:	31 05       	cpc	r19, r1
  c0:	44 f3       	brlt	.-48     	; 0x92 <keypad_get_key+0x6>
			SET_BIT(KEYPAD_PORT, keypad_col[k]);
		
		//1. set i pin = 0 GROUND
		CLR_BIT(KEYPAD_PORT, keypad_col[i]);
  c2:	22 b3       	in	r18, 0x12	; 18
  c4:	fa 01       	movw	r30, r20
  c6:	ee 0f       	add	r30, r30
  c8:	ff 1f       	adc	r31, r31
  ca:	e0 5a       	subi	r30, 0xA0	; 160
  cc:	ff 4f       	sbci	r31, 0xFF	; 255
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	00 80       	ld	r0, Z
  d4:	02 c0       	rjmp	.+4      	; 0xda <keypad_get_key+0x4e>
  d6:	88 0f       	add	r24, r24
  d8:	99 1f       	adc	r25, r25
  da:	0a 94       	dec	r0
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <keypad_get_key+0x4a>
  de:	80 95       	com	r24
  e0:	82 23       	and	r24, r18
  e2:	82 bb       	out	0x12, r24	; 18
		
		//loop for j inputs on that output pin i
		for(j=0; j<4; j++)
  e4:	60 e0       	ldi	r22, 0x00	; 0
  e6:	70 e0       	ldi	r23, 0x00	; 0
  e8:	5e c0       	rjmp	.+188    	; 0x1a6 <keypad_get_key+0x11a>
		{
			//if pin is pressed the ground will be connected to the KEYPAD_PIN
			//So if pin = 0, then its pressed
			if(!(KEYPAD_PIN & (1 << keypad_row[j])))
  ea:	80 b3       	in	r24, 0x10	; 16
  ec:	fb 01       	movw	r30, r22
  ee:	ee 0f       	add	r30, r30
  f0:	ff 1f       	adc	r31, r31
  f2:	e8 59       	subi	r30, 0x98	; 152
  f4:	ff 4f       	sbci	r31, 0xFF	; 255
  f6:	20 81       	ld	r18, Z
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	02 2e       	mov	r0, r18
  fc:	02 c0       	rjmp	.+4      	; 0x102 <keypad_get_key+0x76>
  fe:	95 95       	asr	r25
 100:	87 95       	ror	r24
 102:	0a 94       	dec	r0
 104:	e2 f7       	brpl	.-8      	; 0xfe <keypad_get_key+0x72>
 106:	80 fd       	sbrc	r24, 0
 108:	4c c0       	rjmp	.+152    	; 0x1a2 <keypad_get_key+0x116>
			{
				//single press mode
				while(!(KEYPAD_PIN & (1 << keypad_row[j])));
 10a:	80 b3       	in	r24, 0x10	; 16
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	02 2e       	mov	r0, r18
 110:	02 c0       	rjmp	.+4      	; 0x116 <keypad_get_key+0x8a>
 112:	95 95       	asr	r25
 114:	87 95       	ror	r24
 116:	0a 94       	dec	r0
 118:	e2 f7       	brpl	.-8      	; 0x112 <keypad_get_key+0x86>
 11a:	80 ff       	sbrs	r24, 0
 11c:	f6 cf       	rjmp	.-20     	; 0x10a <keypad_get_key+0x7e>
				switch(i)
 11e:	41 30       	cpi	r20, 0x01	; 1
 120:	51 05       	cpc	r21, r1
 122:	c9 f0       	breq	.+50     	; 0x156 <keypad_get_key+0xca>
 124:	24 f4       	brge	.+8      	; 0x12e <keypad_get_key+0xa2>
 126:	41 15       	cp	r20, r1
 128:	51 05       	cpc	r21, r1
 12a:	41 f0       	breq	.+16     	; 0x13c <keypad_get_key+0xb0>
 12c:	3a c0       	rjmp	.+116    	; 0x1a2 <keypad_get_key+0x116>
 12e:	42 30       	cpi	r20, 0x02	; 2
 130:	51 05       	cpc	r21, r1
 132:	f1 f0       	breq	.+60     	; 0x170 <keypad_get_key+0xe4>
 134:	43 30       	cpi	r20, 0x03	; 3
 136:	51 05       	cpc	r21, r1
 138:	41 f1       	breq	.+80     	; 0x18a <keypad_get_key+0xfe>
 13a:	33 c0       	rjmp	.+102    	; 0x1a2 <keypad_get_key+0x116>
				{
					case(0):
					{
						if(j==0) return '7';
 13c:	61 15       	cp	r22, r1
 13e:	71 05       	cpc	r23, r1
 140:	f1 f1       	breq	.+124    	; 0x1be <keypad_get_key+0x132>
						else if(j==1) return '4';
 142:	61 30       	cpi	r22, 0x01	; 1
 144:	71 05       	cpc	r23, r1
 146:	e9 f1       	breq	.+122    	; 0x1c2 <keypad_get_key+0x136>
						else if(j==2) return '1';
 148:	62 30       	cpi	r22, 0x02	; 2
 14a:	71 05       	cpc	r23, r1
 14c:	e1 f1       	breq	.+120    	; 0x1c6 <keypad_get_key+0x13a>
						else if(j==3) return '?';
 14e:	63 30       	cpi	r22, 0x03	; 3
 150:	71 05       	cpc	r23, r1
 152:	39 f5       	brne	.+78     	; 0x1a2 <keypad_get_key+0x116>
 154:	3a c0       	rjmp	.+116    	; 0x1ca <keypad_get_key+0x13e>
						break;
					}
					case(1):
					{
						if(j==0) return '8';
 156:	61 15       	cp	r22, r1
 158:	71 05       	cpc	r23, r1
 15a:	c9 f1       	breq	.+114    	; 0x1ce <keypad_get_key+0x142>
						else if(j==1) return '5';
 15c:	61 30       	cpi	r22, 0x01	; 1
 15e:	71 05       	cpc	r23, r1
 160:	c1 f1       	breq	.+112    	; 0x1d2 <keypad_get_key+0x146>
						else if(j==2) return '2';
 162:	62 30       	cpi	r22, 0x02	; 2
 164:	71 05       	cpc	r23, r1
 166:	b9 f1       	breq	.+110    	; 0x1d6 <keypad_get_key+0x14a>
						else if(j==3) return '0';
 168:	63 30       	cpi	r22, 0x03	; 3
 16a:	71 05       	cpc	r23, r1
 16c:	d1 f4       	brne	.+52     	; 0x1a2 <keypad_get_key+0x116>
 16e:	35 c0       	rjmp	.+106    	; 0x1da <keypad_get_key+0x14e>
						break;
					}
					case(2):
					{
						if(j==0) return '9';
 170:	61 15       	cp	r22, r1
 172:	71 05       	cpc	r23, r1
 174:	a1 f1       	breq	.+104    	; 0x1de <keypad_get_key+0x152>
						else if(j==1) return '6';
 176:	61 30       	cpi	r22, 0x01	; 1
 178:	71 05       	cpc	r23, r1
 17a:	99 f1       	breq	.+102    	; 0x1e2 <keypad_get_key+0x156>
						else if(j==2) return '3';
 17c:	62 30       	cpi	r22, 0x02	; 2
 17e:	71 05       	cpc	r23, r1
 180:	91 f1       	breq	.+100    	; 0x1e6 <keypad_get_key+0x15a>
						else if(j==3) return '=';
 182:	63 30       	cpi	r22, 0x03	; 3
 184:	71 05       	cpc	r23, r1
 186:	69 f4       	brne	.+26     	; 0x1a2 <keypad_get_key+0x116>
 188:	30 c0       	rjmp	.+96     	; 0x1ea <keypad_get_key+0x15e>
						break;
					}
					case(3):
					{
						if(j==0) return '/';
 18a:	61 15       	cp	r22, r1
 18c:	71 05       	cpc	r23, r1
 18e:	79 f1       	breq	.+94     	; 0x1ee <keypad_get_key+0x162>
						else if(j==1) return '*';
 190:	61 30       	cpi	r22, 0x01	; 1
 192:	71 05       	cpc	r23, r1
 194:	71 f1       	breq	.+92     	; 0x1f2 <keypad_get_key+0x166>
						else if(j==2) return '-';
 196:	62 30       	cpi	r22, 0x02	; 2
 198:	71 05       	cpc	r23, r1
 19a:	69 f1       	breq	.+90     	; 0x1f6 <keypad_get_key+0x16a>
						else if(j==3) return '+';
 19c:	63 30       	cpi	r22, 0x03	; 3
 19e:	71 05       	cpc	r23, r1
 1a0:	61 f1       	breq	.+88     	; 0x1fa <keypad_get_key+0x16e>
		
		//1. set i pin = 0 GROUND
		CLR_BIT(KEYPAD_PORT, keypad_col[i]);
		
		//loop for j inputs on that output pin i
		for(j=0; j<4; j++)
 1a2:	6f 5f       	subi	r22, 0xFF	; 255
 1a4:	7f 4f       	sbci	r23, 0xFF	; 255
 1a6:	64 30       	cpi	r22, 0x04	; 4
 1a8:	71 05       	cpc	r23, r1
 1aa:	0c f4       	brge	.+2      	; 0x1ae <keypad_get_key+0x122>
 1ac:	9e cf       	rjmp	.-196    	; 0xea <keypad_get_key+0x5e>

char keypad_get_key()
{
	int i,j;
	//loop for output
	for(i=0; i<4; i++)
 1ae:	4f 5f       	subi	r20, 0xFF	; 255
 1b0:	5f 4f       	sbci	r21, 0xFF	; 255
 1b2:	44 30       	cpi	r20, 0x04	; 4
 1b4:	51 05       	cpc	r21, r1
 1b6:	0c f4       	brge	.+2      	; 0x1ba <keypad_get_key+0x12e>
 1b8:	7f cf       	rjmp	.-258    	; 0xb8 <keypad_get_key+0x2c>
				}
			}
		}
	}
	//return A if no key is pressed
	return 'A';
 1ba:	81 e4       	ldi	r24, 0x41	; 65
 1bc:	08 95       	ret
				while(!(KEYPAD_PIN & (1 << keypad_row[j])));
				switch(i)
				{
					case(0):
					{
						if(j==0) return '7';
 1be:	87 e3       	ldi	r24, 0x37	; 55
 1c0:	08 95       	ret
						else if(j==1) return '4';
 1c2:	84 e3       	ldi	r24, 0x34	; 52
 1c4:	08 95       	ret
						else if(j==2) return '1';
 1c6:	81 e3       	ldi	r24, 0x31	; 49
 1c8:	08 95       	ret
						else if(j==3) return '?';
 1ca:	8f e3       	ldi	r24, 0x3F	; 63
 1cc:	08 95       	ret
						break;
					}
					case(1):
					{
						if(j==0) return '8';
 1ce:	88 e3       	ldi	r24, 0x38	; 56
 1d0:	08 95       	ret
						else if(j==1) return '5';
 1d2:	85 e3       	ldi	r24, 0x35	; 53
 1d4:	08 95       	ret
						else if(j==2) return '2';
 1d6:	82 e3       	ldi	r24, 0x32	; 50
 1d8:	08 95       	ret
						else if(j==3) return '0';
 1da:	80 e3       	ldi	r24, 0x30	; 48
 1dc:	08 95       	ret
						break;
					}
					case(2):
					{
						if(j==0) return '9';
 1de:	89 e3       	ldi	r24, 0x39	; 57
 1e0:	08 95       	ret
						else if(j==1) return '6';
 1e2:	86 e3       	ldi	r24, 0x36	; 54
 1e4:	08 95       	ret
						else if(j==2) return '3';
 1e6:	83 e3       	ldi	r24, 0x33	; 51
 1e8:	08 95       	ret
						else if(j==3) return '=';
 1ea:	8d e3       	ldi	r24, 0x3D	; 61
 1ec:	08 95       	ret
						break;
					}
					case(3):
					{
						if(j==0) return '/';
 1ee:	8f e2       	ldi	r24, 0x2F	; 47
 1f0:	08 95       	ret
						else if(j==1) return '*';
 1f2:	8a e2       	ldi	r24, 0x2A	; 42
 1f4:	08 95       	ret
						else if(j==2) return '-';
 1f6:	8d e2       	ldi	r24, 0x2D	; 45
 1f8:	08 95       	ret
						else if(j==3) return '+';
 1fa:	8b e2       	ldi	r24, 0x2B	; 43
			}
		}
	}
	//return A if no key is pressed
	return 'A';
 1fc:	08 95       	ret

000001fe <ENABLE_cycle>:
	if(line == 1)
	LCD_command(LCD_BEGIN_AT_FIRST_ROW + position);
	else if(line == 2)
	LCD_command(LCD_BEGIN_AT_SECOND_ROW + position);
	return 1;
}
 1fe:	88 b3       	in	r24, 0x18	; 24
 200:	88 60       	ori	r24, 0x08	; 8
 202:	88 bb       	out	0x18, r24	; 24
 204:	83 ed       	ldi	r24, 0xD3	; 211
 206:	90 e3       	ldi	r25, 0x30	; 48
 208:	01 97       	sbiw	r24, 0x01	; 1
 20a:	f1 f7       	brne	.-4      	; 0x208 <ENABLE_cycle+0xa>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <ENABLE_cycle+0x10>
 20e:	00 00       	nop
 210:	88 b3       	in	r24, 0x18	; 24
 212:	87 7f       	andi	r24, 0xF7	; 247
 214:	88 bb       	out	0x18, r24	; 24
 216:	08 95       	ret

00000218 <LCD_isbusy>:
 218:	1a ba       	out	0x1a, r1	; 26
 21a:	88 b3       	in	r24, 0x18	; 24
 21c:	84 60       	ori	r24, 0x04	; 4
 21e:	88 bb       	out	0x18, r24	; 24
 220:	88 b3       	in	r24, 0x18	; 24
 222:	8d 7f       	andi	r24, 0xFD	; 253
 224:	88 bb       	out	0x18, r24	; 24
 226:	0e 94 ff 00 	call	0x1fe	; 0x1fe <ENABLE_cycle>
 22a:	8f ef       	ldi	r24, 0xFF	; 255
 22c:	8a bb       	out	0x1a, r24	; 26
 22e:	88 b3       	in	r24, 0x18	; 24
 230:	8d 7f       	andi	r24, 0xFD	; 253
 232:	88 bb       	out	0x18, r24	; 24
 234:	08 95       	ret

00000236 <LCD_command>:
 236:	cf 93       	push	r28
 238:	c8 2f       	mov	r28, r24
 23a:	0e 94 0c 01 	call	0x218	; 0x218 <LCD_isbusy>
 23e:	cb bb       	out	0x1b, r28	; 27
 240:	88 b3       	in	r24, 0x18	; 24
 242:	8d 7f       	andi	r24, 0xFD	; 253
 244:	88 bb       	out	0x18, r24	; 24
 246:	88 b3       	in	r24, 0x18	; 24
 248:	8b 7f       	andi	r24, 0xFB	; 251
 24a:	88 bb       	out	0x18, r24	; 24
 24c:	89 ef       	ldi	r24, 0xF9	; 249
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	01 97       	sbiw	r24, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <LCD_command+0x1a>
 254:	00 c0       	rjmp	.+0      	; 0x256 <LCD_command+0x20>
 256:	00 00       	nop
 258:	0e 94 ff 00 	call	0x1fe	; 0x1fe <ENABLE_cycle>
 25c:	cf 91       	pop	r28
 25e:	08 95       	ret

00000260 <LCD_clear_screen>:
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_command>
 266:	08 95       	ret

00000268 <LCD_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 268:	87 e8       	ldi	r24, 0x87	; 135
 26a:	93 e1       	ldi	r25, 0x13	; 19
 26c:	01 97       	sbiw	r24, 0x01	; 1
 26e:	f1 f7       	brne	.-4      	; 0x26c <LCD_init+0x4>
 270:	00 c0       	rjmp	.+0      	; 0x272 <LCD_init+0xa>
 272:	00 00       	nop
void LCD_init(void)
{
	//0. waiting power ON
	_delay_ms(20);
	//1. set LCD data ports (PA0:PA7) as output
	DataDir_LCD_DATA = 0xFF;
 274:	8f ef       	ldi	r24, 0xFF	; 255
 276:	8a bb       	out	0x1a, r24	; 26
	//2. set LCD CTRL ports (PB1:PB3) as output, then reset
	DataDir_LCD_CTRL = 0b1110;
 278:	8e e0       	ldi	r24, 0x0E	; 14
 27a:	87 bb       	out	0x17, r24	; 23
	LCD_CTRL &= ~(0b1110);
 27c:	88 b3       	in	r24, 0x18	; 24
 27e:	81 7f       	andi	r24, 0xF1	; 241
 280:	88 bb       	out	0x18, r24	; 24
 282:	85 ea       	ldi	r24, 0xA5	; 165
 284:	9e e0       	ldi	r25, 0x0E	; 14
 286:	01 97       	sbiw	r24, 0x01	; 1
 288:	f1 f7       	brne	.-4      	; 0x286 <LCD_init+0x1e>
 28a:	00 c0       	rjmp	.+0      	; 0x28c <LCD_init+0x24>
 28c:	00 00       	nop
	//waiting 
	_delay_ms(15);

	//3. initialize LCD
	#ifdef _8_BIT_MODE
	LCD_command(LCD_FUNCTION_8BIT_2LINES);
 28e:	88 e3       	ldi	r24, 0x38	; 56
 290:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_command>
	LCD_command(LCD_RETURN_HOME);
	LCD_command(LCD_FUNCTION_4BIT_2LINES);
	#endif
	
	//4. clear LCD
	LCD_command(LCD_CLEAR_SCREEN);
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_command>
	
	//5. Return home
	LCD_command(LCD_RETURN_HOME);
 29a:	82 e0       	ldi	r24, 0x02	; 2
 29c:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_command>
	
	//6. Entry mode
	LCD_command(LCD_ENTRY_MODE);
 2a0:	86 e0       	ldi	r24, 0x06	; 6
 2a2:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_command>
	
	//7. start at first row
	LCD_command(LCD_BEGIN_AT_FIRST_ROW);
 2a6:	80 e8       	ldi	r24, 0x80	; 128
 2a8:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_command>
	
	//8. cursor blink
	LCD_command(LCD_DISP_ON_CURSOR_BLINK);
 2ac:	8f e0       	ldi	r24, 0x0F	; 15
 2ae:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_command>
 2b2:	08 95       	ret

000002b4 <LCD_write_char>:
	ENABLE_cycle();
	#endif
}

void LCD_write_char(uint8_t data)
{
 2b4:	cf 93       	push	r28
 2b6:	c8 2f       	mov	r28, r24
	#ifdef _8_BIT_MODE
	//0. check busy
	LCD_isbusy();
 2b8:	0e 94 0c 01 	call	0x218	; 0x218 <LCD_isbusy>
	//1. copy data
	LCD_DATA = data;
 2bc:	cb bb       	out	0x1b, r28	; 27
	//2. set RS & clear RW
	SET_BIT(LCD_CTRL, RS_SWITCH);
 2be:	88 b3       	in	r24, 0x18	; 24
 2c0:	82 60       	ori	r24, 0x02	; 2
 2c2:	88 bb       	out	0x18, r24	; 24
	CLR_BIT(LCD_CTRL, RW_SWITCH);
 2c4:	88 b3       	in	r24, 0x18	; 24
 2c6:	8b 7f       	andi	r24, 0xFB	; 251
 2c8:	88 bb       	out	0x18, r24	; 24
 2ca:	89 ef       	ldi	r24, 0xF9	; 249
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	01 97       	sbiw	r24, 0x01	; 1
 2d0:	f1 f7       	brne	.-4      	; 0x2ce <LCD_write_char+0x1a>
 2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <LCD_write_char+0x20>
 2d4:	00 00       	nop
	_delay_ms(1);
	//3. enable cycle
	ENABLE_cycle();
 2d6:	0e 94 ff 00 	call	0x1fe	; 0x1fe <ENABLE_cycle>
	CLR_BIT(LCD_CTRL, RW_SWITCH);
	_delay_ms(1);
	//3. enable cycle
	ENABLE_cycle();
	#endif
}
 2da:	cf 91       	pop	r28
 2dc:	08 95       	ret

000002de <main>:


int main(void)
{
	char key_pressed;
    LCD_init();
 2de:	0e 94 34 01 	call	0x268	; 0x268 <LCD_init>
	keypad_init();
 2e2:	0e 94 41 00 	call	0x82	; 0x82 <keypad_init>
	
    while (1) 
    {
		key_pressed = keypad_get_key();
 2e6:	0e 94 46 00 	call	0x8c	; 0x8c <keypad_get_key>
		switch(key_pressed)
 2ea:	8f 33       	cpi	r24, 0x3F	; 63
 2ec:	19 f0       	breq	.+6      	; 0x2f4 <main+0x16>
 2ee:	81 34       	cpi	r24, 0x41	; 65
 2f0:	d1 f3       	breq	.-12     	; 0x2e6 <main+0x8>
 2f2:	03 c0       	rjmp	.+6      	; 0x2fa <main+0x1c>
		{
			case('A'):	//nothing pressed
			break;
			case('?'):
			{
				LCD_clear_screen();
 2f4:	0e 94 30 01 	call	0x260	; 0x260 <LCD_clear_screen>
				break;
 2f8:	f6 cf       	rjmp	.-20     	; 0x2e6 <main+0x8>
			}
			default:
			{
				LCD_write_char(key_pressed);
 2fa:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <LCD_write_char>
				break;
 2fe:	f3 cf       	rjmp	.-26     	; 0x2e6 <main+0x8>

00000300 <_exit>:
 300:	f8 94       	cli

00000302 <__stop_program>:
 302:	ff cf       	rjmp	.-2      	; 0x302 <__stop_program>
