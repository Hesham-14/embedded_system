
unit7_L3_section_LCD_STM32_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000894  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080009c4  080009c4  000109c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080009ec  080009ec  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  080009ec  080009ec  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  080009ec  080009ec  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080009ec  080009ec  000109ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080009f0  080009f0  000109f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  080009f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000020  08000a14  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000040  08000a14  00020040  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003047  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000798  00000000  00000000  00023090  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000007f0  00000000  00000000  00023828  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000158  00000000  00000000  00024018  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000110  00000000  00000000  00024170  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001fb8  00000000  00000000  00024280  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001b7a  00000000  00000000  00026238  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00007baf  00000000  00000000  00027db2  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002f961  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000418  00000000  00000000  0002f9dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000020 	.word	0x20000020
 800014c:	00000000 	.word	0x00000000
 8000150:	080009ac 	.word	0x080009ac

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000024 	.word	0x20000024
 800016c:	080009ac 	.word	0x080009ac

08000170 <keypad_init>:

int Key_padRow[] = { R0, R1, R2, R3 }; //rows of the keypad
int Key_padCol[] = { C0, C1, C2, C3 }; //columns

void keypad_init()
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
		GPIO_PinConfig_t pin;
		int i=0;
 8000176:	2300      	movs	r3, #0
 8000178:	607b      	str	r3, [r7, #4]
		//1. intialize R & C pins as output
		for(i=0; i<=8; i++)
 800017a:	2300      	movs	r3, #0
 800017c:	607b      	str	r3, [r7, #4]
 800017e:	e01c      	b.n	80001ba <keypad_init+0x4a>
		{
			if(i==2)
 8000180:	687b      	ldr	r3, [r7, #4]
 8000182:	2b02      	cmp	r3, #2
 8000184:	d015      	beq.n	80001b2 <keypad_init+0x42>
				continue;
			pin.GPIO_PinNumber = (0b1 << i);
 8000186:	2201      	movs	r2, #1
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	fa02 f303 	lsl.w	r3, r2, r3
 800018e:	b29b      	uxth	r3, r3
 8000190:	803b      	strh	r3, [r7, #0]
			pin.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 8000192:	2304      	movs	r3, #4
 8000194:	70bb      	strb	r3, [r7, #2]
			pin.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000196:	2301      	movs	r3, #1
 8000198:	70fb      	strb	r3, [r7, #3]
			MCAL_GPIO_Init(KEYPAD_PORT, &pin);
 800019a:	463b      	mov	r3, r7
 800019c:	4619      	mov	r1, r3
 800019e:	480a      	ldr	r0, [pc, #40]	; (80001c8 <keypad_init+0x58>)
 80001a0:	f000 fa97 	bl	80006d2 <MCAL_GPIO_Init>
			MCAL_GPIO_WritePin(KEYPAD_PORT, pin.GPIO_PinNumber , GPIO_PIN_SET);
 80001a4:	883b      	ldrh	r3, [r7, #0]
 80001a6:	2201      	movs	r2, #1
 80001a8:	4619      	mov	r1, r3
 80001aa:	4807      	ldr	r0, [pc, #28]	; (80001c8 <keypad_init+0x58>)
 80001ac:	f000 fb0d 	bl	80007ca <MCAL_GPIO_WritePin>
 80001b0:	e000      	b.n	80001b4 <keypad_init+0x44>
				continue;
 80001b2:	bf00      	nop
		for(i=0; i<=8; i++)
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	3301      	adds	r3, #1
 80001b8:	607b      	str	r3, [r7, #4]
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	2b08      	cmp	r3, #8
 80001be:	dddf      	ble.n	8000180 <keypad_init+0x10>
		}
}
 80001c0:	bf00      	nop
 80001c2:	3708      	adds	r7, #8
 80001c4:	46bd      	mov	sp, r7
 80001c6:	bd80      	pop	{r7, pc}
 80001c8:	40010c00 	.word	0x40010c00

080001cc <keypad_get_key>:

char keypad_get_key()
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af00      	add	r7, sp, #0
	int i,j;
	for(i=0; i<4; i++)
 80001d2:	2300      	movs	r3, #0
 80001d4:	607b      	str	r3, [r7, #4]
 80001d6:	e0ba      	b.n	800034e <keypad_get_key+0x182>
	{
		//0. write 1 on all col pins
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[0], GPIO_PIN_SET);
 80001d8:	4b61      	ldr	r3, [pc, #388]	; (8000360 <keypad_get_key+0x194>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	b29b      	uxth	r3, r3
 80001de:	2201      	movs	r2, #1
 80001e0:	4619      	mov	r1, r3
 80001e2:	4860      	ldr	r0, [pc, #384]	; (8000364 <keypad_get_key+0x198>)
 80001e4:	f000 faf1 	bl	80007ca <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[1], GPIO_PIN_SET);
 80001e8:	4b5d      	ldr	r3, [pc, #372]	; (8000360 <keypad_get_key+0x194>)
 80001ea:	685b      	ldr	r3, [r3, #4]
 80001ec:	b29b      	uxth	r3, r3
 80001ee:	2201      	movs	r2, #1
 80001f0:	4619      	mov	r1, r3
 80001f2:	485c      	ldr	r0, [pc, #368]	; (8000364 <keypad_get_key+0x198>)
 80001f4:	f000 fae9 	bl	80007ca <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[2], GPIO_PIN_SET);
 80001f8:	4b59      	ldr	r3, [pc, #356]	; (8000360 <keypad_get_key+0x194>)
 80001fa:	689b      	ldr	r3, [r3, #8]
 80001fc:	b29b      	uxth	r3, r3
 80001fe:	2201      	movs	r2, #1
 8000200:	4619      	mov	r1, r3
 8000202:	4858      	ldr	r0, [pc, #352]	; (8000364 <keypad_get_key+0x198>)
 8000204:	f000 fae1 	bl	80007ca <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[3], GPIO_PIN_SET);
 8000208:	4b55      	ldr	r3, [pc, #340]	; (8000360 <keypad_get_key+0x194>)
 800020a:	68db      	ldr	r3, [r3, #12]
 800020c:	b29b      	uxth	r3, r3
 800020e:	2201      	movs	r2, #1
 8000210:	4619      	mov	r1, r3
 8000212:	4854      	ldr	r0, [pc, #336]	; (8000364 <keypad_get_key+0x198>)
 8000214:	f000 fad9 	bl	80007ca <MCAL_GPIO_WritePin>

		//1. make first col pin ground to loop its row
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[i], GPIO_PIN_RESET);
 8000218:	4a51      	ldr	r2, [pc, #324]	; (8000360 <keypad_get_key+0x194>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000220:	b29b      	uxth	r3, r3
 8000222:	2200      	movs	r2, #0
 8000224:	4619      	mov	r1, r3
 8000226:	484f      	ldr	r0, [pc, #316]	; (8000364 <keypad_get_key+0x198>)
 8000228:	f000 facf 	bl	80007ca <MCAL_GPIO_WritePin>

		//2. loop over rows and check if power on
		for(j=0; j<4; j++)
 800022c:	2300      	movs	r3, #0
 800022e:	603b      	str	r3, [r7, #0]
 8000230:	e086      	b.n	8000340 <keypad_get_key+0x174>
		{
			if(MCAL_GPIO_ReadPin(KEYPAD_PORT, Key_padRow[j] == 0))
 8000232:	4a4d      	ldr	r2, [pc, #308]	; (8000368 <keypad_get_key+0x19c>)
 8000234:	683b      	ldr	r3, [r7, #0]
 8000236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800023a:	2b00      	cmp	r3, #0
 800023c:	bf0c      	ite	eq
 800023e:	2301      	moveq	r3, #1
 8000240:	2300      	movne	r3, #0
 8000242:	b2db      	uxtb	r3, r3
 8000244:	b29b      	uxth	r3, r3
 8000246:	4619      	mov	r1, r3
 8000248:	4846      	ldr	r0, [pc, #280]	; (8000364 <keypad_get_key+0x198>)
 800024a:	f000 faaa 	bl	80007a2 <MCAL_GPIO_ReadPin>
 800024e:	4603      	mov	r3, r0
 8000250:	2b00      	cmp	r3, #0
 8000252:	d072      	beq.n	800033a <keypad_get_key+0x16e>
			{
				//single press mode
				while(MCAL_GPIO_ReadPin(KEYPAD_PORT, Key_padRow[j]) == 0);
 8000254:	bf00      	nop
 8000256:	4a44      	ldr	r2, [pc, #272]	; (8000368 <keypad_get_key+0x19c>)
 8000258:	683b      	ldr	r3, [r7, #0]
 800025a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800025e:	b29b      	uxth	r3, r3
 8000260:	4619      	mov	r1, r3
 8000262:	4840      	ldr	r0, [pc, #256]	; (8000364 <keypad_get_key+0x198>)
 8000264:	f000 fa9d 	bl	80007a2 <MCAL_GPIO_ReadPin>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d0f3      	beq.n	8000256 <keypad_get_key+0x8a>
				switch(i)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	2b03      	cmp	r3, #3
 8000272:	d862      	bhi.n	800033a <keypad_get_key+0x16e>
 8000274:	a201      	add	r2, pc, #4	; (adr r2, 800027c <keypad_get_key+0xb0>)
 8000276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800027a:	bf00      	nop
 800027c:	0800028d 	.word	0x0800028d
 8000280:	080002b5 	.word	0x080002b5
 8000284:	080002dd 	.word	0x080002dd
 8000288:	08000305 	.word	0x08000305
				{
				case(0):
													if(j==0) return '7';
 800028c:	683b      	ldr	r3, [r7, #0]
 800028e:	2b00      	cmp	r3, #0
 8000290:	d101      	bne.n	8000296 <keypad_get_key+0xca>
 8000292:	2337      	movs	r3, #55	; 0x37
 8000294:	e060      	b.n	8000358 <keypad_get_key+0x18c>
													else if(j==1) return '4';
 8000296:	683b      	ldr	r3, [r7, #0]
 8000298:	2b01      	cmp	r3, #1
 800029a:	d101      	bne.n	80002a0 <keypad_get_key+0xd4>
 800029c:	2334      	movs	r3, #52	; 0x34
 800029e:	e05b      	b.n	8000358 <keypad_get_key+0x18c>
													else if(j==2) return '1';
 80002a0:	683b      	ldr	r3, [r7, #0]
 80002a2:	2b02      	cmp	r3, #2
 80002a4:	d101      	bne.n	80002aa <keypad_get_key+0xde>
 80002a6:	2331      	movs	r3, #49	; 0x31
 80002a8:	e056      	b.n	8000358 <keypad_get_key+0x18c>
													else if(j==3) return '?';
 80002aa:	683b      	ldr	r3, [r7, #0]
 80002ac:	2b03      	cmp	r3, #3
 80002ae:	d13d      	bne.n	800032c <keypad_get_key+0x160>
 80002b0:	233f      	movs	r3, #63	; 0x3f
 80002b2:	e051      	b.n	8000358 <keypad_get_key+0x18c>
				break;
				case(1):
													if(j==0) return '8';
 80002b4:	683b      	ldr	r3, [r7, #0]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d101      	bne.n	80002be <keypad_get_key+0xf2>
 80002ba:	2338      	movs	r3, #56	; 0x38
 80002bc:	e04c      	b.n	8000358 <keypad_get_key+0x18c>
													else if(j==1) return '5';
 80002be:	683b      	ldr	r3, [r7, #0]
 80002c0:	2b01      	cmp	r3, #1
 80002c2:	d101      	bne.n	80002c8 <keypad_get_key+0xfc>
 80002c4:	2335      	movs	r3, #53	; 0x35
 80002c6:	e047      	b.n	8000358 <keypad_get_key+0x18c>
													else if(j==2) return '2';
 80002c8:	683b      	ldr	r3, [r7, #0]
 80002ca:	2b02      	cmp	r3, #2
 80002cc:	d101      	bne.n	80002d2 <keypad_get_key+0x106>
 80002ce:	2332      	movs	r3, #50	; 0x32
 80002d0:	e042      	b.n	8000358 <keypad_get_key+0x18c>
													else if(j==3) return '0';
 80002d2:	683b      	ldr	r3, [r7, #0]
 80002d4:	2b03      	cmp	r3, #3
 80002d6:	d12b      	bne.n	8000330 <keypad_get_key+0x164>
 80002d8:	2330      	movs	r3, #48	; 0x30
 80002da:	e03d      	b.n	8000358 <keypad_get_key+0x18c>
				break;
				case(2):
													if(j==0) return '9';
 80002dc:	683b      	ldr	r3, [r7, #0]
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d101      	bne.n	80002e6 <keypad_get_key+0x11a>
 80002e2:	2339      	movs	r3, #57	; 0x39
 80002e4:	e038      	b.n	8000358 <keypad_get_key+0x18c>
													else if(j==1) return '6';
 80002e6:	683b      	ldr	r3, [r7, #0]
 80002e8:	2b01      	cmp	r3, #1
 80002ea:	d101      	bne.n	80002f0 <keypad_get_key+0x124>
 80002ec:	2336      	movs	r3, #54	; 0x36
 80002ee:	e033      	b.n	8000358 <keypad_get_key+0x18c>
													else if(j==2) return '3';
 80002f0:	683b      	ldr	r3, [r7, #0]
 80002f2:	2b02      	cmp	r3, #2
 80002f4:	d101      	bne.n	80002fa <keypad_get_key+0x12e>
 80002f6:	2333      	movs	r3, #51	; 0x33
 80002f8:	e02e      	b.n	8000358 <keypad_get_key+0x18c>
													else if(j==3) return '=';
 80002fa:	683b      	ldr	r3, [r7, #0]
 80002fc:	2b03      	cmp	r3, #3
 80002fe:	d119      	bne.n	8000334 <keypad_get_key+0x168>
 8000300:	233d      	movs	r3, #61	; 0x3d
 8000302:	e029      	b.n	8000358 <keypad_get_key+0x18c>
				break;
				case(3):
													if(j==0) return '/';
 8000304:	683b      	ldr	r3, [r7, #0]
 8000306:	2b00      	cmp	r3, #0
 8000308:	d101      	bne.n	800030e <keypad_get_key+0x142>
 800030a:	232f      	movs	r3, #47	; 0x2f
 800030c:	e024      	b.n	8000358 <keypad_get_key+0x18c>
													else if(j==1) return '*';
 800030e:	683b      	ldr	r3, [r7, #0]
 8000310:	2b01      	cmp	r3, #1
 8000312:	d101      	bne.n	8000318 <keypad_get_key+0x14c>
 8000314:	232a      	movs	r3, #42	; 0x2a
 8000316:	e01f      	b.n	8000358 <keypad_get_key+0x18c>
													else if(j==2) return '-';
 8000318:	683b      	ldr	r3, [r7, #0]
 800031a:	2b02      	cmp	r3, #2
 800031c:	d101      	bne.n	8000322 <keypad_get_key+0x156>
 800031e:	232d      	movs	r3, #45	; 0x2d
 8000320:	e01a      	b.n	8000358 <keypad_get_key+0x18c>
													else if(j==3) return '+';
 8000322:	683b      	ldr	r3, [r7, #0]
 8000324:	2b03      	cmp	r3, #3
 8000326:	d107      	bne.n	8000338 <keypad_get_key+0x16c>
 8000328:	232b      	movs	r3, #43	; 0x2b
 800032a:	e015      	b.n	8000358 <keypad_get_key+0x18c>
				break;
 800032c:	bf00      	nop
 800032e:	e004      	b.n	800033a <keypad_get_key+0x16e>
				break;
 8000330:	bf00      	nop
 8000332:	e002      	b.n	800033a <keypad_get_key+0x16e>
				break;
 8000334:	bf00      	nop
 8000336:	e000      	b.n	800033a <keypad_get_key+0x16e>
				break;
 8000338:	bf00      	nop
		for(j=0; j<4; j++)
 800033a:	683b      	ldr	r3, [r7, #0]
 800033c:	3301      	adds	r3, #1
 800033e:	603b      	str	r3, [r7, #0]
 8000340:	683b      	ldr	r3, [r7, #0]
 8000342:	2b03      	cmp	r3, #3
 8000344:	f77f af75 	ble.w	8000232 <keypad_get_key+0x66>
	for(i=0; i<4; i++)
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	3301      	adds	r3, #1
 800034c:	607b      	str	r3, [r7, #4]
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	2b03      	cmp	r3, #3
 8000352:	f77f af41 	ble.w	80001d8 <keypad_get_key+0xc>
			}
		}

	}
	//return A if no key is pressed
	return 'A';
 8000356:	2341      	movs	r3, #65	; 0x41
}
 8000358:	4618      	mov	r0, r3
 800035a:	3708      	adds	r7, #8
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}
 8000360:	20000010 	.word	0x20000010
 8000364:	40010c00 	.word	0x40010c00
 8000368:	20000000 	.word	0x20000000

0800036c <delay_ms>:
/*
 * =========================================================================
 * 								Generic Functions
 * =========================================================================
 */
void delay_ms(uint32_t time){
 800036c:	b480      	push	{r7}
 800036e:	b085      	sub	sp, #20
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 8000374:	2300      	movs	r3, #0
 8000376:	60fb      	str	r3, [r7, #12]
 8000378:	e00b      	b.n	8000392 <delay_ms+0x26>
		for (j = 0; j < 255; j++)
 800037a:	2300      	movs	r3, #0
 800037c:	60bb      	str	r3, [r7, #8]
 800037e:	e002      	b.n	8000386 <delay_ms+0x1a>
 8000380:	68bb      	ldr	r3, [r7, #8]
 8000382:	3301      	adds	r3, #1
 8000384:	60bb      	str	r3, [r7, #8]
 8000386:	68bb      	ldr	r3, [r7, #8]
 8000388:	2bfe      	cmp	r3, #254	; 0xfe
 800038a:	d9f9      	bls.n	8000380 <delay_ms+0x14>
	for (i = 0; i < time; i++)
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	3301      	adds	r3, #1
 8000390:	60fb      	str	r3, [r7, #12]
 8000392:	68fa      	ldr	r2, [r7, #12]
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	429a      	cmp	r2, r3
 8000398:	d3ef      	bcc.n	800037a <delay_ms+0xe>
			;
}
 800039a:	bf00      	nop
 800039c:	3714      	adds	r7, #20
 800039e:	46bd      	mov	sp, r7
 80003a0:	bc80      	pop	{r7}
 80003a2:	4770      	bx	lr

080003a4 <LCD_clear_screen>:

void LCD_clear_screen(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
	LCD_command(LCD_CLEAR_SCREEN);
 80003a8:	2001      	movs	r0, #1
 80003aa:	f000 f8cd 	bl	8000548 <LCD_command>
	count=0;
 80003ae:	4b02      	ldr	r3, [pc, #8]	; (80003b8 <LCD_clear_screen+0x14>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	601a      	str	r2, [r3, #0]
}
 80003b4:	bf00      	nop
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	2000003c 	.word	0x2000003c

080003bc <ENABLE_cycle>:

void ENABLE_cycle()
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_SET);
 80003c0:	2201      	movs	r2, #1
 80003c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003c6:	4807      	ldr	r0, [pc, #28]	; (80003e4 <ENABLE_cycle+0x28>)
 80003c8:	f000 f9ff 	bl	80007ca <MCAL_GPIO_WritePin>
	delay_ms(50);
 80003cc:	2032      	movs	r0, #50	; 0x32
 80003ce:	f7ff ffcd 	bl	800036c <delay_ms>
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 80003d2:	2200      	movs	r2, #0
 80003d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003d8:	4802      	ldr	r0, [pc, #8]	; (80003e4 <ENABLE_cycle+0x28>)
 80003da:	f000 f9f6 	bl	80007ca <MCAL_GPIO_WritePin>
}
 80003de:	bf00      	nop
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	40010800 	.word	0x40010800

080003e8 <LCD_GOTO>:
	//6. clear RS
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
}

int LCD_GOTO(unsigned char  line, unsigned char position)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	4603      	mov	r3, r0
 80003f0:	460a      	mov	r2, r1
 80003f2:	71fb      	strb	r3, [r7, #7]
 80003f4:	4613      	mov	r3, r2
 80003f6:	71bb      	strb	r3, [r7, #6]
	//false case
	if(position > 16 || position < 0)
 80003f8:	79bb      	ldrb	r3, [r7, #6]
 80003fa:	2b10      	cmp	r3, #16
 80003fc:	d901      	bls.n	8000402 <LCD_GOTO+0x1a>
		return 0;
 80003fe:	2300      	movs	r3, #0
 8000400:	e013      	b.n	800042a <LCD_GOTO+0x42>

	if(line == 1)
 8000402:	79fb      	ldrb	r3, [r7, #7]
 8000404:	2b01      	cmp	r3, #1
 8000406:	d106      	bne.n	8000416 <LCD_GOTO+0x2e>
		LCD_command(LCD_BEGIN_AT_FIRST_ROW + position);
 8000408:	79bb      	ldrb	r3, [r7, #6]
 800040a:	3b80      	subs	r3, #128	; 0x80
 800040c:	b2db      	uxtb	r3, r3
 800040e:	4618      	mov	r0, r3
 8000410:	f000 f89a 	bl	8000548 <LCD_command>
 8000414:	e008      	b.n	8000428 <LCD_GOTO+0x40>
	else if(line == 2)
 8000416:	79fb      	ldrb	r3, [r7, #7]
 8000418:	2b02      	cmp	r3, #2
 800041a:	d105      	bne.n	8000428 <LCD_GOTO+0x40>
		LCD_command(LCD_BEGIN_AT_SECOND_ROW + position);
 800041c:	79bb      	ldrb	r3, [r7, #6]
 800041e:	3b40      	subs	r3, #64	; 0x40
 8000420:	b2db      	uxtb	r3, r3
 8000422:	4618      	mov	r0, r3
 8000424:	f000 f890 	bl	8000548 <LCD_command>
	return 1;
 8000428:	2301      	movs	r3, #1
}
 800042a:	4618      	mov	r0, r3
 800042c:	3708      	adds	r7, #8
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
	...

08000434 <check_line>:

void check_line()
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
	if(count == 17)
 8000438:	4b0b      	ldr	r3, [pc, #44]	; (8000468 <check_line+0x34>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	2b11      	cmp	r3, #17
 800043e:	d104      	bne.n	800044a <check_line+0x16>
		LCD_GOTO(2,0);
 8000440:	2100      	movs	r1, #0
 8000442:	2002      	movs	r0, #2
 8000444:	f7ff ffd0 	bl	80003e8 <LCD_GOTO>
	{
		LCD_clear_screen();
		LCD_GOTO(1,0);
		count = 0;
	}
}
 8000448:	e00c      	b.n	8000464 <check_line+0x30>
	else if(count == 33)
 800044a:	4b07      	ldr	r3, [pc, #28]	; (8000468 <check_line+0x34>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	2b21      	cmp	r3, #33	; 0x21
 8000450:	d108      	bne.n	8000464 <check_line+0x30>
		LCD_clear_screen();
 8000452:	f7ff ffa7 	bl	80003a4 <LCD_clear_screen>
		LCD_GOTO(1,0);
 8000456:	2100      	movs	r1, #0
 8000458:	2001      	movs	r0, #1
 800045a:	f7ff ffc5 	bl	80003e8 <LCD_GOTO>
		count = 0;
 800045e:	4b02      	ldr	r3, [pc, #8]	; (8000468 <check_line+0x34>)
 8000460:	2200      	movs	r2, #0
 8000462:	601a      	str	r2, [r3, #0]
}
 8000464:	bf00      	nop
 8000466:	bd80      	pop	{r7, pc}
 8000468:	2000003c 	.word	0x2000003c

0800046c <LCD_init>:
 * Note			-STM32F103C6 MCU has GPIO A,B,C,D,E Modules,
 * 				 but LQFP48 package has only GPIO A, B, and (part of C,D) exported as extenal PINs from thr MCU
 * 				 -Also mandatory to enable RCC clock for AFIO and the corresponding GPIO
 */
void LCD_init(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b084      	sub	sp, #16
 8000470:	af00      	add	r7, sp, #0
	//1. Delay for power ON
	delay_ms(20);
 8000472:	2014      	movs	r0, #20
 8000474:	f7ff ff7a 	bl	800036c <delay_ms>

	GPIO_PinConfig_t pinCfg;
	int i=0, j=9;
 8000478:	2300      	movs	r3, #0
 800047a:	60fb      	str	r3, [r7, #12]
 800047c:	2309      	movs	r3, #9
 800047e:	60bb      	str	r3, [r7, #8]
	//2. set LCD data ports as output
	for(i=0; i<=7; i++)
 8000480:	2300      	movs	r3, #0
 8000482:	60fb      	str	r3, [r7, #12]
 8000484:	e011      	b.n	80004aa <LCD_init+0x3e>
	{
		pinCfg.GPIO_PinNumber = (0b1 << i);
 8000486:	2201      	movs	r2, #1
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	fa02 f303 	lsl.w	r3, r2, r3
 800048e:	b29b      	uxth	r3, r3
 8000490:	80bb      	strh	r3, [r7, #4]
		pinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 8000492:	2304      	movs	r3, #4
 8000494:	71bb      	strb	r3, [r7, #6]
		pinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000496:	2301      	movs	r3, #1
 8000498:	71fb      	strb	r3, [r7, #7]
		MCAL_GPIO_Init(LCD_CTRL, &pinCfg);
 800049a:	1d3b      	adds	r3, r7, #4
 800049c:	4619      	mov	r1, r3
 800049e:	4829      	ldr	r0, [pc, #164]	; (8000544 <LCD_init+0xd8>)
 80004a0:	f000 f917 	bl	80006d2 <MCAL_GPIO_Init>
	for(i=0; i<=7; i++)
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	3301      	adds	r3, #1
 80004a8:	60fb      	str	r3, [r7, #12]
 80004aa:	68fb      	ldr	r3, [r7, #12]
 80004ac:	2b07      	cmp	r3, #7
 80004ae:	ddea      	ble.n	8000486 <LCD_init+0x1a>
	}
	volatile int k=5;
 80004b0:	2305      	movs	r3, #5
 80004b2:	603b      	str	r3, [r7, #0]
	if(k==5)
 80004b4:	683b      	ldr	r3, [r7, #0]
 80004b6:	2b05      	cmp	r3, #5
 80004b8:	d101      	bne.n	80004be <LCD_init+0x52>
		k=7;
 80004ba:	2307      	movs	r3, #7
 80004bc:	603b      	str	r3, [r7, #0]
	//3. set LCD CTRL ports as output and reset it
	for(j=8; j<=10; j++)
 80004be:	2308      	movs	r3, #8
 80004c0:	60bb      	str	r3, [r7, #8]
 80004c2:	e011      	b.n	80004e8 <LCD_init+0x7c>
	{
		pinCfg.GPIO_PinNumber = (0b1 << j);
 80004c4:	2201      	movs	r2, #1
 80004c6:	68bb      	ldr	r3, [r7, #8]
 80004c8:	fa02 f303 	lsl.w	r3, r2, r3
 80004cc:	b29b      	uxth	r3, r3
 80004ce:	80bb      	strh	r3, [r7, #4]
		pinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 80004d0:	2304      	movs	r3, #4
 80004d2:	71bb      	strb	r3, [r7, #6]
		pinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80004d4:	2301      	movs	r3, #1
 80004d6:	71fb      	strb	r3, [r7, #7]
		MCAL_GPIO_Init(LCD_CTRL, &pinCfg);
 80004d8:	1d3b      	adds	r3, r7, #4
 80004da:	4619      	mov	r1, r3
 80004dc:	4819      	ldr	r0, [pc, #100]	; (8000544 <LCD_init+0xd8>)
 80004de:	f000 f8f8 	bl	80006d2 <MCAL_GPIO_Init>
	for(j=8; j<=10; j++)
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	3301      	adds	r3, #1
 80004e6:	60bb      	str	r3, [r7, #8]
 80004e8:	68bb      	ldr	r3, [r7, #8]
 80004ea:	2b0a      	cmp	r3, #10
 80004ec:	ddea      	ble.n	80004c4 <LCD_init+0x58>
	}
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 80004ee:	2200      	movs	r2, #0
 80004f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004f4:	4813      	ldr	r0, [pc, #76]	; (8000544 <LCD_init+0xd8>)
 80004f6:	f000 f968 	bl	80007ca <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 80004fa:	2200      	movs	r2, #0
 80004fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000500:	4810      	ldr	r0, [pc, #64]	; (8000544 <LCD_init+0xd8>)
 8000502:	f000 f962 	bl	80007ca <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 8000506:	2200      	movs	r2, #0
 8000508:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800050c:	480d      	ldr	r0, [pc, #52]	; (8000544 <LCD_init+0xd8>)
 800050e:	f000 f95c 	bl	80007ca <MCAL_GPIO_WritePin>


	//wait
	delay_ms(15);
 8000512:	200f      	movs	r0, #15
 8000514:	f7ff ff2a 	bl	800036c <delay_ms>

	//4. initialize LCD
	LCD_command(LCD_FUNCTION_8BIT_2LINES);
 8000518:	2038      	movs	r0, #56	; 0x38
 800051a:	f000 f815 	bl	8000548 <LCD_command>

	//5. clear LCD
	LCD_clear_screen();
 800051e:	f7ff ff41 	bl	80003a4 <LCD_clear_screen>

	//6. Return home
	LCD_command(LCD_RETURN_HOME);
 8000522:	2002      	movs	r0, #2
 8000524:	f000 f810 	bl	8000548 <LCD_command>

	//7. Entry mode
	LCD_command(LCD_ENTRY_MODE);
 8000528:	2006      	movs	r0, #6
 800052a:	f000 f80d 	bl	8000548 <LCD_command>

	//8. start at first row
	LCD_command(LCD_BEGIN_AT_FIRST_ROW);
 800052e:	2080      	movs	r0, #128	; 0x80
 8000530:	f000 f80a 	bl	8000548 <LCD_command>

	//9. cursor blinck
	LCD_command(LCD_DISP_ON_CURSOR_BLINK);
 8000534:	200f      	movs	r0, #15
 8000536:	f000 f807 	bl	8000548 <LCD_command>
}
 800053a:	bf00      	nop
 800053c:	3710      	adds	r7, #16
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40010800 	.word	0x40010800

08000548 <LCD_command>:

void LCD_command(unsigned char cmd)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	4603      	mov	r3, r0
 8000550:	71fb      	strb	r3, [r7, #7]
	//1. check busy
	//LCD_isbusy();

	//2. copy data
	MCAL_GPIO_WritePort(LCD_CTRL, cmd);
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	b29b      	uxth	r3, r3
 8000556:	4619      	mov	r1, r3
 8000558:	480b      	ldr	r0, [pc, #44]	; (8000588 <LCD_command+0x40>)
 800055a:	f000 f94d 	bl	80007f8 <MCAL_GPIO_WritePort>

	//3. clear RS & RW
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 800055e:	2200      	movs	r2, #0
 8000560:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000564:	4808      	ldr	r0, [pc, #32]	; (8000588 <LCD_command+0x40>)
 8000566:	f000 f930 	bl	80007ca <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 800056a:	2200      	movs	r2, #0
 800056c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000570:	4805      	ldr	r0, [pc, #20]	; (8000588 <LCD_command+0x40>)
 8000572:	f000 f92a 	bl	80007ca <MCAL_GPIO_WritePin>
	delay_ms(20);
 8000576:	2014      	movs	r0, #20
 8000578:	f7ff fef8 	bl	800036c <delay_ms>

	//4. enable cycle
	ENABLE_cycle();
 800057c:	f7ff ff1e 	bl	80003bc <ENABLE_cycle>
}
 8000580:	bf00      	nop
 8000582:	3708      	adds	r7, #8
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	40010800 	.word	0x40010800

0800058c <LCD_write_char>:

void LCD_write_char(unsigned char data)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	71fb      	strb	r3, [r7, #7]
	//1. check busy
	//LCD_isbusy();

	//2. check line
	count++;
 8000596:	4b11      	ldr	r3, [pc, #68]	; (80005dc <LCD_write_char+0x50>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	3301      	adds	r3, #1
 800059c:	4a0f      	ldr	r2, [pc, #60]	; (80005dc <LCD_write_char+0x50>)
 800059e:	6013      	str	r3, [r2, #0]
	check_line();
 80005a0:	f7ff ff48 	bl	8000434 <check_line>

	//3. copy data
	MCAL_GPIO_WritePort(LCD_CTRL, data);
 80005a4:	79fb      	ldrb	r3, [r7, #7]
 80005a6:	b29b      	uxth	r3, r3
 80005a8:	4619      	mov	r1, r3
 80005aa:	480d      	ldr	r0, [pc, #52]	; (80005e0 <LCD_write_char+0x54>)
 80005ac:	f000 f924 	bl	80007f8 <MCAL_GPIO_WritePort>

	//4. set RS & clear RW
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_SET);
 80005b0:	2201      	movs	r2, #1
 80005b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005b6:	480a      	ldr	r0, [pc, #40]	; (80005e0 <LCD_write_char+0x54>)
 80005b8:	f000 f907 	bl	80007ca <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 80005bc:	2200      	movs	r2, #0
 80005be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005c2:	4807      	ldr	r0, [pc, #28]	; (80005e0 <LCD_write_char+0x54>)
 80005c4:	f000 f901 	bl	80007ca <MCAL_GPIO_WritePin>
	delay_ms(20);
 80005c8:	2014      	movs	r0, #20
 80005ca:	f7ff fecf 	bl	800036c <delay_ms>

	//5. enable cycle
	ENABLE_cycle();
 80005ce:	f7ff fef5 	bl	80003bc <ENABLE_cycle>
}
 80005d2:	bf00      	nop
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	2000003c 	.word	0x2000003c
 80005e0:	40010800 	.word	0x40010800

080005e4 <LCD_write_string>:

void LCD_write_string(char* string)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	while(*string > 0)
 80005ec:	e006      	b.n	80005fc <LCD_write_string+0x18>
	{
		LCD_write_char(*string++);
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	1c5a      	adds	r2, r3, #1
 80005f2:	607a      	str	r2, [r7, #4]
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	4618      	mov	r0, r3
 80005f8:	f7ff ffc8 	bl	800058c <LCD_write_char>
	while(*string > 0)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d1f4      	bne.n	80005ee <LCD_write_string+0xa>
	}
}
 8000604:	bf00      	nop
 8000606:	3708      	adds	r7, #8
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}

0800060c <Get_CRLH_Position>:
 */
#include "STM32F103C6_GPIO_Driver.h"


uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 8000616:	88fb      	ldrh	r3, [r7, #6]
 8000618:	2b80      	cmp	r3, #128	; 0x80
 800061a:	d042      	beq.n	80006a2 <Get_CRLH_Position+0x96>
 800061c:	2b80      	cmp	r3, #128	; 0x80
 800061e:	dc11      	bgt.n	8000644 <Get_CRLH_Position+0x38>
 8000620:	2b08      	cmp	r3, #8
 8000622:	d036      	beq.n	8000692 <Get_CRLH_Position+0x86>
 8000624:	2b08      	cmp	r3, #8
 8000626:	dc06      	bgt.n	8000636 <Get_CRLH_Position+0x2a>
 8000628:	2b02      	cmp	r3, #2
 800062a:	d02e      	beq.n	800068a <Get_CRLH_Position+0x7e>
 800062c:	2b04      	cmp	r3, #4
 800062e:	d02e      	beq.n	800068e <Get_CRLH_Position+0x82>
 8000630:	2b01      	cmp	r3, #1
 8000632:	d028      	beq.n	8000686 <Get_CRLH_Position+0x7a>
 8000634:	e047      	b.n	80006c6 <Get_CRLH_Position+0xba>
 8000636:	2b20      	cmp	r3, #32
 8000638:	d02f      	beq.n	800069a <Get_CRLH_Position+0x8e>
 800063a:	2b40      	cmp	r3, #64	; 0x40
 800063c:	d02f      	beq.n	800069e <Get_CRLH_Position+0x92>
 800063e:	2b10      	cmp	r3, #16
 8000640:	d029      	beq.n	8000696 <Get_CRLH_Position+0x8a>
 8000642:	e040      	b.n	80006c6 <Get_CRLH_Position+0xba>
 8000644:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000648:	d033      	beq.n	80006b2 <Get_CRLH_Position+0xa6>
 800064a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800064e:	dc09      	bgt.n	8000664 <Get_CRLH_Position+0x58>
 8000650:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000654:	d029      	beq.n	80006aa <Get_CRLH_Position+0x9e>
 8000656:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800065a:	d028      	beq.n	80006ae <Get_CRLH_Position+0xa2>
 800065c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000660:	d021      	beq.n	80006a6 <Get_CRLH_Position+0x9a>
 8000662:	e030      	b.n	80006c6 <Get_CRLH_Position+0xba>
 8000664:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000668:	d027      	beq.n	80006ba <Get_CRLH_Position+0xae>
 800066a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800066e:	dc03      	bgt.n	8000678 <Get_CRLH_Position+0x6c>
 8000670:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000674:	d01f      	beq.n	80006b6 <Get_CRLH_Position+0xaa>
 8000676:	e026      	b.n	80006c6 <Get_CRLH_Position+0xba>
 8000678:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800067c:	d01f      	beq.n	80006be <Get_CRLH_Position+0xb2>
 800067e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000682:	d01e      	beq.n	80006c2 <Get_CRLH_Position+0xb6>
 8000684:	e01f      	b.n	80006c6 <Get_CRLH_Position+0xba>
	{
	case GPIO_PIN_0:
		return 0;
 8000686:	2300      	movs	r3, #0
 8000688:	e01e      	b.n	80006c8 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_1:
		return 4;
 800068a:	2304      	movs	r3, #4
 800068c:	e01c      	b.n	80006c8 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_2:
		return 8;
 800068e:	2308      	movs	r3, #8
 8000690:	e01a      	b.n	80006c8 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_3:
		return 12;
 8000692:	230c      	movs	r3, #12
 8000694:	e018      	b.n	80006c8 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_4:
		return 16;
 8000696:	2310      	movs	r3, #16
 8000698:	e016      	b.n	80006c8 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_5:
		return 20;
 800069a:	2314      	movs	r3, #20
 800069c:	e014      	b.n	80006c8 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_6:
		return 24;
 800069e:	2318      	movs	r3, #24
 80006a0:	e012      	b.n	80006c8 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_7:
		return 28;
 80006a2:	231c      	movs	r3, #28
 80006a4:	e010      	b.n	80006c8 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_8:
		return 0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	e00e      	b.n	80006c8 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_9:
		return 4;
 80006aa:	2304      	movs	r3, #4
 80006ac:	e00c      	b.n	80006c8 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_10:
		return 8;
 80006ae:	2308      	movs	r3, #8
 80006b0:	e00a      	b.n	80006c8 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_11:
		return 12;
 80006b2:	230c      	movs	r3, #12
 80006b4:	e008      	b.n	80006c8 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_12:
		return 16;
 80006b6:	2310      	movs	r3, #16
 80006b8:	e006      	b.n	80006c8 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_13:
		return 20;
 80006ba:	2314      	movs	r3, #20
 80006bc:	e004      	b.n	80006c8 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_14:
		return 24;
 80006be:	2318      	movs	r3, #24
 80006c0:	e002      	b.n	80006c8 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_15:
		return 28;
 80006c2:	231c      	movs	r3, #28
 80006c4:	e000      	b.n	80006c8 <Get_CRLH_Position+0xbc>
		break;
	}
	return 0;
 80006c6:	2300      	movs	r3, #0
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	370c      	adds	r7, #12
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bc80      	pop	{r7}
 80006d0:	4770      	bx	lr

080006d2 <MCAL_GPIO_Init>:
 * @retval 		-none
 * Note			-STM32F103C6 MCU has GPIO A,B,C,D,E Modules,
 * 				 but LQFP48 package has only GPIO A, B, and (part of C,D) exported as extenal PINs from thr MCU
 */
void MCAL_GPIO_Init(GPIO_t *GPIOx, GPIO_PinConfig_t *PinConfig)
{
 80006d2:	b590      	push	{r4, r7, lr}
 80006d4:	b085      	sub	sp, #20
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	6078      	str	r0, [r7, #4]
 80006da:	6039      	str	r1, [r7, #0]
	//check CRL\H
	volatile uint32_t *ConfigRegister = NULL;
 80006dc:	2300      	movs	r3, #0
 80006de:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_Config = 0;
 80006e0:	2300      	movs	r3, #0
 80006e2:	73fb      	strb	r3, [r7, #15]
	ConfigRegister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8)? &GPIOx->CRL: &GPIOx->CRH;
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	881b      	ldrh	r3, [r3, #0]
 80006e8:	2bff      	cmp	r3, #255	; 0xff
 80006ea:	d801      	bhi.n	80006f0 <MCAL_GPIO_Init+0x1e>
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	e001      	b.n	80006f4 <MCAL_GPIO_Init+0x22>
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	3304      	adds	r3, #4
 80006f4:	60bb      	str	r3, [r7, #8]

	//0. clear CNFy[1:0] MODEy[1:0]
	*ConfigRegister &= ~(0xF << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	881b      	ldrh	r3, [r3, #0]
 80006fa:	4618      	mov	r0, r3
 80006fc:	f7ff ff86 	bl	800060c <Get_CRLH_Position>
 8000700:	4603      	mov	r3, r0
 8000702:	461a      	mov	r2, r3
 8000704:	230f      	movs	r3, #15
 8000706:	4093      	lsls	r3, r2
 8000708:	43da      	mvns	r2, r3
 800070a:	68bb      	ldr	r3, [r7, #8]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	401a      	ands	r2, r3
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	601a      	str	r2, [r3, #0]

	//1. if pin is output
	if((PinConfig->GPIO_Mode >= GPIO_MODE_OUTPUT_PP) && (PinConfig->GPIO_Mode <= GPIO_MODE_OUTPUT_AF_OD))
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	789b      	ldrb	r3, [r3, #2]
 8000718:	2b03      	cmp	r3, #3
 800071a:	d911      	bls.n	8000740 <MCAL_GPIO_Init+0x6e>
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	789b      	ldrb	r3, [r3, #2]
 8000720:	2b07      	cmp	r3, #7
 8000722:	d80d      	bhi.n	8000740 <MCAL_GPIO_Init+0x6e>
	{
		//set CNF from output options, then set MODE (speed)
		PIN_Config = (((PinConfig->GPIO_Mode - 0x4UL) << 2) | (PinConfig->GPIO_Output_Speed & 0x0F));
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	789b      	ldrb	r3, [r3, #2]
 8000728:	3b04      	subs	r3, #4
 800072a:	b2db      	uxtb	r3, r3
 800072c:	009b      	lsls	r3, r3, #2
 800072e:	b2da      	uxtb	r2, r3
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	78db      	ldrb	r3, [r3, #3]
 8000734:	f003 030f 	and.w	r3, r3, #15
 8000738:	b2db      	uxtb	r3, r3
 800073a:	4313      	orrs	r3, r2
 800073c:	73fb      	strb	r3, [r7, #15]
 800073e:	e01e      	b.n	800077e <MCAL_GPIO_Init+0xac>
	}
	//2. if pin is input
	else
	{
		//if input pull-down, reset ODR
		if(PinConfig->GPIO_Mode == GPIO_MODE_INPUT_PD)
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	789b      	ldrb	r3, [r3, #2]
 8000744:	2b03      	cmp	r3, #3
 8000746:	d108      	bne.n	800075a <MCAL_GPIO_Init+0x88>
		{
			GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	68db      	ldr	r3, [r3, #12]
 800074c:	683a      	ldr	r2, [r7, #0]
 800074e:	8812      	ldrh	r2, [r2, #0]
 8000750:	43d2      	mvns	r2, r2
 8000752:	401a      	ands	r2, r3
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	60da      	str	r2, [r3, #12]
 8000758:	e00a      	b.n	8000770 <MCAL_GPIO_Init+0x9e>
		}
		//if input pull-up, set ODR
		else if(PinConfig->GPIO_Mode == GPIO_MODE_INPUT_PU)
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	789b      	ldrb	r3, [r3, #2]
 800075e:	2b02      	cmp	r3, #2
 8000760:	d106      	bne.n	8000770 <MCAL_GPIO_Init+0x9e>
		{
			GPIOx->ODR |= (PinConfig->GPIO_PinNumber);
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	68db      	ldr	r3, [r3, #12]
 8000766:	683a      	ldr	r2, [r7, #0]
 8000768:	8812      	ldrh	r2, [r2, #0]
 800076a:	431a      	orrs	r2, r3
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	60da      	str	r2, [r3, #12]
		}

		//set CNF from input options, then set MODe (00)
		PIN_Config = ((PinConfig->GPIO_Mode << 2) & 0x0F );
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	789b      	ldrb	r3, [r3, #2]
 8000774:	009b      	lsls	r3, r3, #2
 8000776:	b2db      	uxtb	r3, r3
 8000778:	f003 030f 	and.w	r3, r3, #15
 800077c:	73fb      	strb	r3, [r7, #15]
	}
	//3. update register with the Pin_Config information
	*ConfigRegister |= (PIN_Config << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 800077e:	7bfc      	ldrb	r4, [r7, #15]
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	881b      	ldrh	r3, [r3, #0]
 8000784:	4618      	mov	r0, r3
 8000786:	f7ff ff41 	bl	800060c <Get_CRLH_Position>
 800078a:	4603      	mov	r3, r0
 800078c:	fa04 f203 	lsl.w	r2, r4, r3
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	431a      	orrs	r2, r3
 8000796:	68bb      	ldr	r3, [r7, #8]
 8000798:	601a      	str	r2, [r3, #0]
}
 800079a:	bf00      	nop
 800079c:	3714      	adds	r7, #20
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd90      	pop	{r4, r7, pc}

080007a2 <MCAL_GPIO_ReadPin>:
 * @param [in] 	-PinNumber: Set pin number according @ref GPIO_PINS_define
 * @retval 		-Pin value (two values based on @ref GPIO_PIN_state)
 * Note			-none
 */
uint8_t MCAL_GPIO_ReadPin(GPIO_t *GPIOx, uint16_t PinNumber)
{
 80007a2:	b480      	push	{r7}
 80007a4:	b083      	sub	sp, #12
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	6078      	str	r0, [r7, #4]
 80007aa:	460b      	mov	r3, r1
 80007ac:	807b      	strh	r3, [r7, #2]
	if((GPIOx->IDR & (uint32_t)PinNumber) != (uint32_t)GPIO_PIN_RESET)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	689a      	ldr	r2, [r3, #8]
 80007b2:	887b      	ldrh	r3, [r7, #2]
 80007b4:	4013      	ands	r3, r2
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MCAL_GPIO_ReadPin+0x1c>
		return GPIO_PIN_SET;
 80007ba:	2301      	movs	r3, #1
 80007bc:	e000      	b.n	80007c0 <MCAL_GPIO_ReadPin+0x1e>
	else
		return GPIO_PIN_RESET;
 80007be:	2300      	movs	r3, #0
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	370c      	adds	r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bc80      	pop	{r7}
 80007c8:	4770      	bx	lr

080007ca <MCAL_GPIO_WritePin>:
 * @param [in] 	-Value: Pin value
 * @retval 		-none
 * Note			-none
 */
void MCAL_GPIO_WritePin(GPIO_t *GPIOx, uint16_t PinNumber, uint8_t value)
{
 80007ca:	b480      	push	{r7}
 80007cc:	b083      	sub	sp, #12
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	6078      	str	r0, [r7, #4]
 80007d2:	460b      	mov	r3, r1
 80007d4:	807b      	strh	r3, [r7, #2]
 80007d6:	4613      	mov	r3, r2
 80007d8:	707b      	strb	r3, [r7, #1]
	//set pin by 1
	if(value != GPIO_PIN_RESET)
 80007da:	787b      	ldrb	r3, [r7, #1]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d003      	beq.n	80007e8 <MCAL_GPIO_WritePin+0x1e>
		GPIOx->BSRR = (uint32_t)PinNumber;
 80007e0:	887a      	ldrh	r2, [r7, #2]
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	611a      	str	r2, [r3, #16]
	else
		//reset bit
		GPIOx->BRR = (uint32_t)PinNumber;
}
 80007e6:	e002      	b.n	80007ee <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR = (uint32_t)PinNumber;
 80007e8:	887a      	ldrh	r2, [r7, #2]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	615a      	str	r2, [r3, #20]
}
 80007ee:	bf00      	nop
 80007f0:	370c      	adds	r7, #12
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bc80      	pop	{r7}
 80007f6:	4770      	bx	lr

080007f8 <MCAL_GPIO_WritePort>:
 * @param [in] 	-Value: port value
 * @retval 		-none
 * Note			-none
 */
void MCAL_GPIO_WritePort(GPIO_t *GPIOx, uint16_t value)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	460b      	mov	r3, r1
 8000802:	807b      	strh	r3, [r7, #2]
	else
		//reset bit
		GPIOx->BRR = value;*/

	//or write directly on port
	GPIOx->ODR = (uint32_t)value;
 8000804:	887a      	ldrh	r2, [r7, #2]
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	60da      	str	r2, [r3, #12]
}
 800080a:	bf00      	nop
 800080c:	370c      	adds	r7, #12
 800080e:	46bd      	mov	sp, r7
 8000810:	bc80      	pop	{r7}
 8000812:	4770      	bx	lr

08000814 <CLK_init>:
#include "LCD.h"
#include "Keypad.h"


void CLK_init()
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
	//1. GPIO port A clock enable
	RCC_GPIOA_CLK_EN();
 8000818:	4b07      	ldr	r3, [pc, #28]	; (8000838 <CLK_init+0x24>)
 800081a:	699b      	ldr	r3, [r3, #24]
 800081c:	4a06      	ldr	r2, [pc, #24]	; (8000838 <CLK_init+0x24>)
 800081e:	f043 0304 	orr.w	r3, r3, #4
 8000822:	6193      	str	r3, [r2, #24]
	//1. GPIO port B clock enable
	RCC_GPIOB_CLK_EN();
 8000824:	4b04      	ldr	r3, [pc, #16]	; (8000838 <CLK_init+0x24>)
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	4a03      	ldr	r2, [pc, #12]	; (8000838 <CLK_init+0x24>)
 800082a:	f043 0308 	orr.w	r3, r3, #8
 800082e:	6193      	str	r3, [r2, #24]
}
 8000830:	bf00      	nop
 8000832:	46bd      	mov	sp, r7
 8000834:	bc80      	pop	{r7}
 8000836:	4770      	bx	lr
 8000838:	40021000 	.word	0x40021000

0800083c <wait_ms>:



void wait_ms(uint32_t time)
{
 800083c:	b480      	push	{r7}
 800083e:	b085      	sub	sp, #20
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for(i=0; i < time; i++)
 8000844:	2300      	movs	r3, #0
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	e00b      	b.n	8000862 <wait_ms+0x26>
		for(j=0; j < 255; j++);
 800084a:	2300      	movs	r3, #0
 800084c:	60bb      	str	r3, [r7, #8]
 800084e:	e002      	b.n	8000856 <wait_ms+0x1a>
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	3301      	adds	r3, #1
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	68bb      	ldr	r3, [r7, #8]
 8000858:	2bfe      	cmp	r3, #254	; 0xfe
 800085a:	d9f9      	bls.n	8000850 <wait_ms+0x14>
	for(i=0; i < time; i++)
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	3301      	adds	r3, #1
 8000860:	60fb      	str	r3, [r7, #12]
 8000862:	68fa      	ldr	r2, [r7, #12]
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	429a      	cmp	r2, r3
 8000868:	d3ef      	bcc.n	800084a <wait_ms+0xe>
}
 800086a:	bf00      	nop
 800086c:	3714      	adds	r7, #20
 800086e:	46bd      	mov	sp, r7
 8000870:	bc80      	pop	{r7}
 8000872:	4770      	bx	lr

08000874 <main>:

int main()
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
	CLK_init();
 800087a:	f7ff ffcb 	bl	8000814 <CLK_init>
	LCD_init();
 800087e:	f7ff fdf5 	bl	800046c <LCD_init>
	keypad_init();
 8000882:	f7ff fc75 	bl	8000170 <keypad_init>
	char key_pressed;
	int i;
	unsigned char LCD_DISPLAY [11] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0'};
 8000886:	4a1f      	ldr	r2, [pc, #124]	; (8000904 <main+0x90>)
 8000888:	463b      	mov	r3, r7
 800088a:	ca07      	ldmia	r2, {r0, r1, r2}
 800088c:	c303      	stmia	r3!, {r0, r1}
 800088e:	801a      	strh	r2, [r3, #0]
 8000890:	3302      	adds	r3, #2
 8000892:	0c12      	lsrs	r2, r2, #16
 8000894:	701a      	strb	r2, [r3, #0]


	LCD_write_string("Hey Hesham");
 8000896:	481c      	ldr	r0, [pc, #112]	; (8000908 <main+0x94>)
 8000898:	f7ff fea4 	bl	80005e4 <LCD_write_string>
	wait_ms(30);
 800089c:	201e      	movs	r0, #30
 800089e:	f7ff ffcd 	bl	800083c <wait_ms>
	for (i = 0; i < 11; i++)
 80008a2:	2300      	movs	r3, #0
 80008a4:	60fb      	str	r3, [r7, #12]
 80008a6:	e00c      	b.n	80008c2 <main+0x4e>
	{
		LCD_write_char(LCD_DISPLAY[i]);
 80008a8:	463a      	mov	r2, r7
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	4413      	add	r3, r2
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	4618      	mov	r0, r3
 80008b2:	f7ff fe6b 	bl	800058c <LCD_write_char>
		wait_ms(30);
 80008b6:	201e      	movs	r0, #30
 80008b8:	f7ff ffc0 	bl	800083c <wait_ms>
	for (i = 0; i < 11; i++)
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	3301      	adds	r3, #1
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	2b0a      	cmp	r3, #10
 80008c6:	ddef      	ble.n	80008a8 <main+0x34>
		/* wait for 1 second */
	}

	LCD_clear_screen();
 80008c8:	f7ff fd6c 	bl	80003a4 <LCD_clear_screen>
	LCD_write_string("Keypad Ready");
 80008cc:	480f      	ldr	r0, [pc, #60]	; (800090c <main+0x98>)
 80008ce:	f7ff fe89 	bl	80005e4 <LCD_write_string>
	wait_ms(30);
 80008d2:	201e      	movs	r0, #30
 80008d4:	f7ff ffb2 	bl	800083c <wait_ms>
	LCD_clear_screen();
 80008d8:	f7ff fd64 	bl	80003a4 <LCD_clear_screen>
	while(1)
	{
		key_pressed = keypad_get_key();
 80008dc:	f7ff fc76 	bl	80001cc <keypad_get_key>
 80008e0:	4603      	mov	r3, r0
 80008e2:	72fb      	strb	r3, [r7, #11]
		switch(key_pressed)
 80008e4:	7afb      	ldrb	r3, [r7, #11]
 80008e6:	2b3f      	cmp	r3, #63	; 0x3f
 80008e8:	d002      	beq.n	80008f0 <main+0x7c>
 80008ea:	2b41      	cmp	r3, #65	; 0x41
 80008ec:	d008      	beq.n	8000900 <main+0x8c>
 80008ee:	e002      	b.n	80008f6 <main+0x82>
		{
		case('A'):
					//nothing pressed
					break;
		case('?'):
					LCD_clear_screen();
 80008f0:	f7ff fd58 	bl	80003a4 <LCD_clear_screen>
					break;
 80008f4:	e005      	b.n	8000902 <main+0x8e>
		default:
			LCD_write_char(key_pressed);
 80008f6:	7afb      	ldrb	r3, [r7, #11]
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff fe47 	bl	800058c <LCD_write_char>
			break;
 80008fe:	e000      	b.n	8000902 <main+0x8e>
					break;
 8000900:	bf00      	nop
		key_pressed = keypad_get_key();
 8000902:	e7eb      	b.n	80008dc <main+0x68>
 8000904:	080009e0 	.word	0x080009e0
 8000908:	080009c4 	.word	0x080009c4
 800090c:	080009d0 	.word	0x080009d0

08000910 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000910:	480d      	ldr	r0, [pc, #52]	; (8000948 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000912:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000914:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000918:	480c      	ldr	r0, [pc, #48]	; (800094c <LoopForever+0x6>)
  ldr r1, =_edata
 800091a:	490d      	ldr	r1, [pc, #52]	; (8000950 <LoopForever+0xa>)
  ldr r2, =_sidata
 800091c:	4a0d      	ldr	r2, [pc, #52]	; (8000954 <LoopForever+0xe>)
  movs r3, #0
 800091e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000920:	e002      	b.n	8000928 <LoopCopyDataInit>

08000922 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000922:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000924:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000926:	3304      	adds	r3, #4

08000928 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000928:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800092a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800092c:	d3f9      	bcc.n	8000922 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800092e:	4a0a      	ldr	r2, [pc, #40]	; (8000958 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000930:	4c0a      	ldr	r4, [pc, #40]	; (800095c <LoopForever+0x16>)
  movs r3, #0
 8000932:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000934:	e001      	b.n	800093a <LoopFillZerobss>

08000936 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000936:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000938:	3204      	adds	r2, #4

0800093a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800093a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800093c:	d3fb      	bcc.n	8000936 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800093e:	f000 f811 	bl	8000964 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000942:	f7ff ff97 	bl	8000874 <main>

08000946 <LoopForever>:

LoopForever:
    b LoopForever
 8000946:	e7fe      	b.n	8000946 <LoopForever>
  ldr   r0, =_estack
 8000948:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 800094c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000950:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000954:	080009f4 	.word	0x080009f4
  ldr r2, =_sbss
 8000958:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 800095c:	20000040 	.word	0x20000040

08000960 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000960:	e7fe      	b.n	8000960 <ADC1_2_IRQHandler>
	...

08000964 <__libc_init_array>:
 8000964:	b570      	push	{r4, r5, r6, lr}
 8000966:	2500      	movs	r5, #0
 8000968:	4e0c      	ldr	r6, [pc, #48]	; (800099c <__libc_init_array+0x38>)
 800096a:	4c0d      	ldr	r4, [pc, #52]	; (80009a0 <__libc_init_array+0x3c>)
 800096c:	1ba4      	subs	r4, r4, r6
 800096e:	10a4      	asrs	r4, r4, #2
 8000970:	42a5      	cmp	r5, r4
 8000972:	d109      	bne.n	8000988 <__libc_init_array+0x24>
 8000974:	f000 f81a 	bl	80009ac <_init>
 8000978:	2500      	movs	r5, #0
 800097a:	4e0a      	ldr	r6, [pc, #40]	; (80009a4 <__libc_init_array+0x40>)
 800097c:	4c0a      	ldr	r4, [pc, #40]	; (80009a8 <__libc_init_array+0x44>)
 800097e:	1ba4      	subs	r4, r4, r6
 8000980:	10a4      	asrs	r4, r4, #2
 8000982:	42a5      	cmp	r5, r4
 8000984:	d105      	bne.n	8000992 <__libc_init_array+0x2e>
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800098c:	4798      	blx	r3
 800098e:	3501      	adds	r5, #1
 8000990:	e7ee      	b.n	8000970 <__libc_init_array+0xc>
 8000992:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000996:	4798      	blx	r3
 8000998:	3501      	adds	r5, #1
 800099a:	e7f2      	b.n	8000982 <__libc_init_array+0x1e>
 800099c:	080009ec 	.word	0x080009ec
 80009a0:	080009ec 	.word	0x080009ec
 80009a4:	080009ec 	.word	0x080009ec
 80009a8:	080009f0 	.word	0x080009f0

080009ac <_init>:
 80009ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009ae:	bf00      	nop
 80009b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009b2:	bc08      	pop	{r3}
 80009b4:	469e      	mov	lr, r3
 80009b6:	4770      	bx	lr

080009b8 <_fini>:
 80009b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009ba:	bf00      	nop
 80009bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009be:	bc08      	pop	{r3}
 80009c0:	469e      	mov	lr, r3
 80009c2:	4770      	bx	lr
