
unit8_L3_UART_Controller_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000009b4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000ae4  08000ae4  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000ae4  08000ae4  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08000ae4  08000ae4  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ae4  08000ae4  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ae4  08000ae4  00010ae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ae8  08000ae8  00010ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08000aec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  20000020  08000b0c  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000008c  08000b0c  0002008c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   000040f7  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000996  00000000  00000000  00024140  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000009f8  00000000  00000000  00024ad6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001c8  00000000  00000000  000254d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000170  00000000  00000000  00025698  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000242b  00000000  00000000  00025808  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00002483  00000000  00000000  00027c33  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000b052  00000000  00000000  0002a0b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00035108  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000564  00000000  00000000  00035184  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000020 	.word	0x20000020
 800014c:	00000000 	.word	0x00000000
 8000150:	08000acc 	.word	0x08000acc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000024 	.word	0x20000024
 800016c:	08000acc 	.word	0x08000acc

08000170 <EXTI0_IRQHandler>:
 * =========================================================================
 * 								IRQ Functions
 * =========================================================================
 */
void EXTI0_IRQHandler()
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	//clear pinding register by writting 1 on it
	EXTI->PR |= (1 << 0);
 8000174:	4b05      	ldr	r3, [pc, #20]	; (800018c <EXTI0_IRQHandler+0x1c>)
 8000176:	695b      	ldr	r3, [r3, #20]
 8000178:	4a04      	ldr	r2, [pc, #16]	; (800018c <EXTI0_IRQHandler+0x1c>)
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	6153      	str	r3, [r2, #20]

	//call CALLBACK
	GP_IRQ_CALLBACK[0]();
 8000180:	4b03      	ldr	r3, [pc, #12]	; (8000190 <EXTI0_IRQHandler+0x20>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4798      	blx	r3
}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40010400 	.word	0x40010400
 8000190:	20000048 	.word	0x20000048

08000194 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler()
{
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	//clear pinding register by writting 1 on it
	EXTI->PR |= (1 << 1);
 8000198:	4b05      	ldr	r3, [pc, #20]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019a:	695b      	ldr	r3, [r3, #20]
 800019c:	4a04      	ldr	r2, [pc, #16]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019e:	f043 0302 	orr.w	r3, r3, #2
 80001a2:	6153      	str	r3, [r2, #20]

	//call CALLBACK
	GP_IRQ_CALLBACK[1]();
 80001a4:	4b03      	ldr	r3, [pc, #12]	; (80001b4 <EXTI1_IRQHandler+0x20>)
 80001a6:	685b      	ldr	r3, [r3, #4]
 80001a8:	4798      	blx	r3
}
 80001aa:	bf00      	nop
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	40010400 	.word	0x40010400
 80001b4:	20000048 	.word	0x20000048

080001b8 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler()
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	//clear pinding register by writting 1 on it
	EXTI->PR |= (1 << 2);
 80001bc:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001be:	695b      	ldr	r3, [r3, #20]
 80001c0:	4a04      	ldr	r2, [pc, #16]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001c2:	f043 0304 	orr.w	r3, r3, #4
 80001c6:	6153      	str	r3, [r2, #20]

	//call CALLBACK
	GP_IRQ_CALLBACK[2]();
 80001c8:	4b03      	ldr	r3, [pc, #12]	; (80001d8 <EXTI2_IRQHandler+0x20>)
 80001ca:	689b      	ldr	r3, [r3, #8]
 80001cc:	4798      	blx	r3
}
 80001ce:	bf00      	nop
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	40010400 	.word	0x40010400
 80001d8:	20000048 	.word	0x20000048

080001dc <EXTI3_IRQHandler>:
void EXTI3_IRQHandler()
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	//clear pinding register by writting 1 on it
	EXTI->PR |= (1 << 3);
 80001e0:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e2:	695b      	ldr	r3, [r3, #20]
 80001e4:	4a04      	ldr	r2, [pc, #16]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e6:	f043 0308 	orr.w	r3, r3, #8
 80001ea:	6153      	str	r3, [r2, #20]

	//call CALLBACK
	GP_IRQ_CALLBACK[3]();
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <EXTI3_IRQHandler+0x20>)
 80001ee:	68db      	ldr	r3, [r3, #12]
 80001f0:	4798      	blx	r3
}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	40010400 	.word	0x40010400
 80001fc:	20000048 	.word	0x20000048

08000200 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler()
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	//clear pinding register by writting 1 on it
	EXTI->PR |= (1 << 4);
 8000204:	4b05      	ldr	r3, [pc, #20]	; (800021c <EXTI4_IRQHandler+0x1c>)
 8000206:	695b      	ldr	r3, [r3, #20]
 8000208:	4a04      	ldr	r2, [pc, #16]	; (800021c <EXTI4_IRQHandler+0x1c>)
 800020a:	f043 0310 	orr.w	r3, r3, #16
 800020e:	6153      	str	r3, [r2, #20]

	//call CALLBACK
	GP_IRQ_CALLBACK[4]();
 8000210:	4b03      	ldr	r3, [pc, #12]	; (8000220 <EXTI4_IRQHandler+0x20>)
 8000212:	691b      	ldr	r3, [r3, #16]
 8000214:	4798      	blx	r3
}
 8000216:	bf00      	nop
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	40010400 	.word	0x40010400
 8000220:	20000048 	.word	0x20000048

08000224 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler()
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	//check which EXTI
	if( EXTI->PR & 1<<5 ) { EXTI->PR |= (1 << 5); GP_IRQ_CALLBACK[5](); }
 8000228:	4b26      	ldr	r3, [pc, #152]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800022a:	695b      	ldr	r3, [r3, #20]
 800022c:	f003 0320 	and.w	r3, r3, #32
 8000230:	2b00      	cmp	r3, #0
 8000232:	d008      	beq.n	8000246 <EXTI9_5_IRQHandler+0x22>
 8000234:	4b23      	ldr	r3, [pc, #140]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000236:	695b      	ldr	r3, [r3, #20]
 8000238:	4a22      	ldr	r2, [pc, #136]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800023a:	f043 0320 	orr.w	r3, r3, #32
 800023e:	6153      	str	r3, [r2, #20]
 8000240:	4b21      	ldr	r3, [pc, #132]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000242:	695b      	ldr	r3, [r3, #20]
 8000244:	4798      	blx	r3
	if( EXTI->PR & 1<<6 ) { EXTI->PR |= (1 << 6); GP_IRQ_CALLBACK[6](); }
 8000246:	4b1f      	ldr	r3, [pc, #124]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000248:	695b      	ldr	r3, [r3, #20]
 800024a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800024e:	2b00      	cmp	r3, #0
 8000250:	d008      	beq.n	8000264 <EXTI9_5_IRQHandler+0x40>
 8000252:	4b1c      	ldr	r3, [pc, #112]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000254:	695b      	ldr	r3, [r3, #20]
 8000256:	4a1b      	ldr	r2, [pc, #108]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800025c:	6153      	str	r3, [r2, #20]
 800025e:	4b1a      	ldr	r3, [pc, #104]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000260:	699b      	ldr	r3, [r3, #24]
 8000262:	4798      	blx	r3
	if( EXTI->PR & 1<<7 ) { EXTI->PR |= (1 << 7); GP_IRQ_CALLBACK[7](); }
 8000264:	4b17      	ldr	r3, [pc, #92]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000266:	695b      	ldr	r3, [r3, #20]
 8000268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800026c:	2b00      	cmp	r3, #0
 800026e:	d008      	beq.n	8000282 <EXTI9_5_IRQHandler+0x5e>
 8000270:	4b14      	ldr	r3, [pc, #80]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000272:	695b      	ldr	r3, [r3, #20]
 8000274:	4a13      	ldr	r2, [pc, #76]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800027a:	6153      	str	r3, [r2, #20]
 800027c:	4b12      	ldr	r3, [pc, #72]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800027e:	69db      	ldr	r3, [r3, #28]
 8000280:	4798      	blx	r3
	if( EXTI->PR & 1<<8 ) { EXTI->PR |= (1 << 8); GP_IRQ_CALLBACK[8](); }
 8000282:	4b10      	ldr	r3, [pc, #64]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800028a:	2b00      	cmp	r3, #0
 800028c:	d008      	beq.n	80002a0 <EXTI9_5_IRQHandler+0x7c>
 800028e:	4b0d      	ldr	r3, [pc, #52]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000290:	695b      	ldr	r3, [r3, #20]
 8000292:	4a0c      	ldr	r2, [pc, #48]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000298:	6153      	str	r3, [r2, #20]
 800029a:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800029c:	6a1b      	ldr	r3, [r3, #32]
 800029e:	4798      	blx	r3
	if( EXTI->PR & 1<<9 ) { EXTI->PR |= (1 << 9); GP_IRQ_CALLBACK[9](); }
 80002a0:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002a2:	695b      	ldr	r3, [r3, #20]
 80002a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d008      	beq.n	80002be <EXTI9_5_IRQHandler+0x9a>
 80002ac:	4b05      	ldr	r3, [pc, #20]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002ae:	695b      	ldr	r3, [r3, #20]
 80002b0:	4a04      	ldr	r2, [pc, #16]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002b6:	6153      	str	r3, [r2, #20]
 80002b8:	4b03      	ldr	r3, [pc, #12]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 80002ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002bc:	4798      	blx	r3

}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40010400 	.word	0x40010400
 80002c8:	20000048 	.word	0x20000048

080002cc <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler()
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	//check which EXTI
	if( EXTI->PR & 1<<10 ) { EXTI->PR |= (1 << 10); GP_IRQ_CALLBACK[10](); }
 80002d0:	4b2d      	ldr	r3, [pc, #180]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002d2:	695b      	ldr	r3, [r3, #20]
 80002d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d008      	beq.n	80002ee <EXTI15_10_IRQHandler+0x22>
 80002dc:	4b2a      	ldr	r3, [pc, #168]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002de:	695b      	ldr	r3, [r3, #20]
 80002e0:	4a29      	ldr	r2, [pc, #164]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002e6:	6153      	str	r3, [r2, #20]
 80002e8:	4b28      	ldr	r3, [pc, #160]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 80002ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002ec:	4798      	blx	r3
	if( EXTI->PR & 1<<11 ) { EXTI->PR |= (1 << 11); GP_IRQ_CALLBACK[11](); }
 80002ee:	4b26      	ldr	r3, [pc, #152]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d008      	beq.n	800030c <EXTI15_10_IRQHandler+0x40>
 80002fa:	4b23      	ldr	r3, [pc, #140]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	4a22      	ldr	r2, [pc, #136]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000300:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000304:	6153      	str	r3, [r2, #20]
 8000306:	4b21      	ldr	r3, [pc, #132]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800030a:	4798      	blx	r3
	if( EXTI->PR & 1<<12 ) { EXTI->PR |= (1 << 12); GP_IRQ_CALLBACK[12](); }
 800030c:	4b1e      	ldr	r3, [pc, #120]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000314:	2b00      	cmp	r3, #0
 8000316:	d008      	beq.n	800032a <EXTI15_10_IRQHandler+0x5e>
 8000318:	4b1b      	ldr	r3, [pc, #108]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	4a1a      	ldr	r2, [pc, #104]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000322:	6153      	str	r3, [r2, #20]
 8000324:	4b19      	ldr	r3, [pc, #100]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000328:	4798      	blx	r3
	if( EXTI->PR & 1<<13 ) { EXTI->PR |= (1 << 13); GP_IRQ_CALLBACK[13](); }
 800032a:	4b17      	ldr	r3, [pc, #92]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000332:	2b00      	cmp	r3, #0
 8000334:	d008      	beq.n	8000348 <EXTI15_10_IRQHandler+0x7c>
 8000336:	4b14      	ldr	r3, [pc, #80]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	4a13      	ldr	r2, [pc, #76]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800033c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000340:	6153      	str	r3, [r2, #20]
 8000342:	4b12      	ldr	r3, [pc, #72]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000346:	4798      	blx	r3
	if( EXTI->PR & 1<<14 ) { EXTI->PR |= (1 << 14); GP_IRQ_CALLBACK[14](); }
 8000348:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000350:	2b00      	cmp	r3, #0
 8000352:	d008      	beq.n	8000366 <EXTI15_10_IRQHandler+0x9a>
 8000354:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000356:	695b      	ldr	r3, [r3, #20]
 8000358:	4a0b      	ldr	r2, [pc, #44]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800035a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800035e:	6153      	str	r3, [r2, #20]
 8000360:	4b0a      	ldr	r3, [pc, #40]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000364:	4798      	blx	r3
	if( EXTI->PR & 1<<15 ) { EXTI->PR |= (1 << 15); GP_IRQ_CALLBACK[15](); }
 8000366:	4b08      	ldr	r3, [pc, #32]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800036e:	2b00      	cmp	r3, #0
 8000370:	d008      	beq.n	8000384 <EXTI15_10_IRQHandler+0xb8>
 8000372:	4b05      	ldr	r3, [pc, #20]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	4a04      	ldr	r2, [pc, #16]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000378:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800037c:	6153      	str	r3, [r2, #20]
 800037e:	4b03      	ldr	r3, [pc, #12]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000382:	4798      	blx	r3

}
 8000384:	bf00      	nop
 8000386:	bd80      	pop	{r7, pc}
 8000388:	40010400 	.word	0x40010400
 800038c:	20000048 	.word	0x20000048

08000390 <Get_CRLH_Position>:
 */
#include "STM32F103C6_GPIO_Driver.h"


uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 800039a:	88fb      	ldrh	r3, [r7, #6]
 800039c:	2b80      	cmp	r3, #128	; 0x80
 800039e:	d042      	beq.n	8000426 <Get_CRLH_Position+0x96>
 80003a0:	2b80      	cmp	r3, #128	; 0x80
 80003a2:	dc11      	bgt.n	80003c8 <Get_CRLH_Position+0x38>
 80003a4:	2b08      	cmp	r3, #8
 80003a6:	d036      	beq.n	8000416 <Get_CRLH_Position+0x86>
 80003a8:	2b08      	cmp	r3, #8
 80003aa:	dc06      	bgt.n	80003ba <Get_CRLH_Position+0x2a>
 80003ac:	2b02      	cmp	r3, #2
 80003ae:	d02e      	beq.n	800040e <Get_CRLH_Position+0x7e>
 80003b0:	2b04      	cmp	r3, #4
 80003b2:	d02e      	beq.n	8000412 <Get_CRLH_Position+0x82>
 80003b4:	2b01      	cmp	r3, #1
 80003b6:	d028      	beq.n	800040a <Get_CRLH_Position+0x7a>
 80003b8:	e047      	b.n	800044a <Get_CRLH_Position+0xba>
 80003ba:	2b20      	cmp	r3, #32
 80003bc:	d02f      	beq.n	800041e <Get_CRLH_Position+0x8e>
 80003be:	2b40      	cmp	r3, #64	; 0x40
 80003c0:	d02f      	beq.n	8000422 <Get_CRLH_Position+0x92>
 80003c2:	2b10      	cmp	r3, #16
 80003c4:	d029      	beq.n	800041a <Get_CRLH_Position+0x8a>
 80003c6:	e040      	b.n	800044a <Get_CRLH_Position+0xba>
 80003c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003cc:	d033      	beq.n	8000436 <Get_CRLH_Position+0xa6>
 80003ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003d2:	dc09      	bgt.n	80003e8 <Get_CRLH_Position+0x58>
 80003d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80003d8:	d029      	beq.n	800042e <Get_CRLH_Position+0x9e>
 80003da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80003de:	d028      	beq.n	8000432 <Get_CRLH_Position+0xa2>
 80003e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80003e4:	d021      	beq.n	800042a <Get_CRLH_Position+0x9a>
 80003e6:	e030      	b.n	800044a <Get_CRLH_Position+0xba>
 80003e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003ec:	d027      	beq.n	800043e <Get_CRLH_Position+0xae>
 80003ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003f2:	dc03      	bgt.n	80003fc <Get_CRLH_Position+0x6c>
 80003f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80003f8:	d01f      	beq.n	800043a <Get_CRLH_Position+0xaa>
 80003fa:	e026      	b.n	800044a <Get_CRLH_Position+0xba>
 80003fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000400:	d01f      	beq.n	8000442 <Get_CRLH_Position+0xb2>
 8000402:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000406:	d01e      	beq.n	8000446 <Get_CRLH_Position+0xb6>
 8000408:	e01f      	b.n	800044a <Get_CRLH_Position+0xba>
	{
	case GPIO_PIN_0:
		return 0;
 800040a:	2300      	movs	r3, #0
 800040c:	e01e      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_1:
		return 4;
 800040e:	2304      	movs	r3, #4
 8000410:	e01c      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_2:
		return 8;
 8000412:	2308      	movs	r3, #8
 8000414:	e01a      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_3:
		return 12;
 8000416:	230c      	movs	r3, #12
 8000418:	e018      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_4:
		return 16;
 800041a:	2310      	movs	r3, #16
 800041c:	e016      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_5:
		return 20;
 800041e:	2314      	movs	r3, #20
 8000420:	e014      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_6:
		return 24;
 8000422:	2318      	movs	r3, #24
 8000424:	e012      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_7:
		return 28;
 8000426:	231c      	movs	r3, #28
 8000428:	e010      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_8:
		return 0;
 800042a:	2300      	movs	r3, #0
 800042c:	e00e      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_9:
		return 4;
 800042e:	2304      	movs	r3, #4
 8000430:	e00c      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_10:
		return 8;
 8000432:	2308      	movs	r3, #8
 8000434:	e00a      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_11:
		return 12;
 8000436:	230c      	movs	r3, #12
 8000438:	e008      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_12:
		return 16;
 800043a:	2310      	movs	r3, #16
 800043c:	e006      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_13:
		return 20;
 800043e:	2314      	movs	r3, #20
 8000440:	e004      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_14:
		return 24;
 8000442:	2318      	movs	r3, #24
 8000444:	e002      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_15:
		return 28;
 8000446:	231c      	movs	r3, #28
 8000448:	e000      	b.n	800044c <Get_CRLH_Position+0xbc>
		break;
	}
	return 0;
 800044a:	2300      	movs	r3, #0
}
 800044c:	4618      	mov	r0, r3
 800044e:	370c      	adds	r7, #12
 8000450:	46bd      	mov	sp, r7
 8000452:	bc80      	pop	{r7}
 8000454:	4770      	bx	lr

08000456 <MCAL_GPIO_Init>:
 * @retval 		-none
 * Note			-STM32F103C6 MCU has GPIO A,B,C,D,E Modules,
 * 				 but LQFP48 package has only GPIO A, B, and (part of C,D) exported as extenal PINs from thr MCU
 */
void MCAL_GPIO_Init(GPIO_t *GPIOx, GPIO_PinConfig_t *PinConfig)
{
 8000456:	b590      	push	{r4, r7, lr}
 8000458:	b085      	sub	sp, #20
 800045a:	af00      	add	r7, sp, #0
 800045c:	6078      	str	r0, [r7, #4]
 800045e:	6039      	str	r1, [r7, #0]
	//check CRL\H
	volatile uint32_t *ConfigRegister = NULL;
 8000460:	2300      	movs	r3, #0
 8000462:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_Config = 0;
 8000464:	2300      	movs	r3, #0
 8000466:	73fb      	strb	r3, [r7, #15]
	ConfigRegister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8)? &GPIOx->CRL: &GPIOx->CRH;
 8000468:	683b      	ldr	r3, [r7, #0]
 800046a:	881b      	ldrh	r3, [r3, #0]
 800046c:	2bff      	cmp	r3, #255	; 0xff
 800046e:	d801      	bhi.n	8000474 <MCAL_GPIO_Init+0x1e>
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	e001      	b.n	8000478 <MCAL_GPIO_Init+0x22>
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	3304      	adds	r3, #4
 8000478:	60bb      	str	r3, [r7, #8]

	//0. clear CNFy[1:0] MODEy[1:0]
	*ConfigRegister &= ~(0xF << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 800047a:	683b      	ldr	r3, [r7, #0]
 800047c:	881b      	ldrh	r3, [r3, #0]
 800047e:	4618      	mov	r0, r3
 8000480:	f7ff ff86 	bl	8000390 <Get_CRLH_Position>
 8000484:	4603      	mov	r3, r0
 8000486:	461a      	mov	r2, r3
 8000488:	230f      	movs	r3, #15
 800048a:	4093      	lsls	r3, r2
 800048c:	43da      	mvns	r2, r3
 800048e:	68bb      	ldr	r3, [r7, #8]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	401a      	ands	r2, r3
 8000494:	68bb      	ldr	r3, [r7, #8]
 8000496:	601a      	str	r2, [r3, #0]

	//1. if pin is output
	if((PinConfig->GPIO_Mode >= GPIO_MODE_OUTPUT_PP) && (PinConfig->GPIO_Mode <= GPIO_MODE_OUTPUT_AF_OD))
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	789b      	ldrb	r3, [r3, #2]
 800049c:	2b03      	cmp	r3, #3
 800049e:	d911      	bls.n	80004c4 <MCAL_GPIO_Init+0x6e>
 80004a0:	683b      	ldr	r3, [r7, #0]
 80004a2:	789b      	ldrb	r3, [r3, #2]
 80004a4:	2b07      	cmp	r3, #7
 80004a6:	d80d      	bhi.n	80004c4 <MCAL_GPIO_Init+0x6e>
	{
		//set CNF from output options, then set MODE (speed)
		PIN_Config = (((PinConfig->GPIO_Mode - 0x4UL) << 2) | (PinConfig->GPIO_Output_Speed & 0x0F));
 80004a8:	683b      	ldr	r3, [r7, #0]
 80004aa:	789b      	ldrb	r3, [r3, #2]
 80004ac:	3b04      	subs	r3, #4
 80004ae:	b2db      	uxtb	r3, r3
 80004b0:	009b      	lsls	r3, r3, #2
 80004b2:	b2da      	uxtb	r2, r3
 80004b4:	683b      	ldr	r3, [r7, #0]
 80004b6:	78db      	ldrb	r3, [r3, #3]
 80004b8:	f003 030f 	and.w	r3, r3, #15
 80004bc:	b2db      	uxtb	r3, r3
 80004be:	4313      	orrs	r3, r2
 80004c0:	73fb      	strb	r3, [r7, #15]
 80004c2:	e01e      	b.n	8000502 <MCAL_GPIO_Init+0xac>
	}
	//2. if pin is input
	else
	{
		//if input pull-down, reset ODR
		if(PinConfig->GPIO_Mode == GPIO_MODE_INPUT_PD)
 80004c4:	683b      	ldr	r3, [r7, #0]
 80004c6:	789b      	ldrb	r3, [r3, #2]
 80004c8:	2b03      	cmp	r3, #3
 80004ca:	d108      	bne.n	80004de <MCAL_GPIO_Init+0x88>
		{
			GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	68db      	ldr	r3, [r3, #12]
 80004d0:	683a      	ldr	r2, [r7, #0]
 80004d2:	8812      	ldrh	r2, [r2, #0]
 80004d4:	43d2      	mvns	r2, r2
 80004d6:	401a      	ands	r2, r3
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	60da      	str	r2, [r3, #12]
 80004dc:	e00a      	b.n	80004f4 <MCAL_GPIO_Init+0x9e>
		}
		//if input pull-up, set ODR
		else if(PinConfig->GPIO_Mode == GPIO_MODE_INPUT_PU)
 80004de:	683b      	ldr	r3, [r7, #0]
 80004e0:	789b      	ldrb	r3, [r3, #2]
 80004e2:	2b02      	cmp	r3, #2
 80004e4:	d106      	bne.n	80004f4 <MCAL_GPIO_Init+0x9e>
		{
			GPIOx->ODR |= (PinConfig->GPIO_PinNumber);
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	68db      	ldr	r3, [r3, #12]
 80004ea:	683a      	ldr	r2, [r7, #0]
 80004ec:	8812      	ldrh	r2, [r2, #0]
 80004ee:	431a      	orrs	r2, r3
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	60da      	str	r2, [r3, #12]
		}

		//set CNF from input options, then set MODe (00)
		PIN_Config = ((PinConfig->GPIO_Mode << 2) & 0x0F );
 80004f4:	683b      	ldr	r3, [r7, #0]
 80004f6:	789b      	ldrb	r3, [r3, #2]
 80004f8:	009b      	lsls	r3, r3, #2
 80004fa:	b2db      	uxtb	r3, r3
 80004fc:	f003 030f 	and.w	r3, r3, #15
 8000500:	73fb      	strb	r3, [r7, #15]
	}
	//3. update register with the Pin_Config information
	*ConfigRegister |= (PIN_Config << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000502:	7bfc      	ldrb	r4, [r7, #15]
 8000504:	683b      	ldr	r3, [r7, #0]
 8000506:	881b      	ldrh	r3, [r3, #0]
 8000508:	4618      	mov	r0, r3
 800050a:	f7ff ff41 	bl	8000390 <Get_CRLH_Position>
 800050e:	4603      	mov	r3, r0
 8000510:	fa04 f203 	lsl.w	r2, r4, r3
 8000514:	68bb      	ldr	r3, [r7, #8]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	431a      	orrs	r2, r3
 800051a:	68bb      	ldr	r3, [r7, #8]
 800051c:	601a      	str	r2, [r3, #0]
}
 800051e:	bf00      	nop
 8000520:	3714      	adds	r7, #20
 8000522:	46bd      	mov	sp, r7
 8000524:	bd90      	pop	{r4, r7, pc}
	...

08000528 <MCAL_RCC_GetSYS_CLKFreq>:
 * @param [in]	-none
 * @retval 		-SYS_CLK value
 * Note			-none
 */
uint32_t MCAL_RCC_GetSYS_CLKFreq(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
	switch(RCC->CFGR >>2 & 0b11)
 800052c:	4b0b      	ldr	r3, [pc, #44]	; (800055c <MCAL_RCC_GetSYS_CLKFreq+0x34>)
 800052e:	685b      	ldr	r3, [r3, #4]
 8000530:	089b      	lsrs	r3, r3, #2
 8000532:	f003 0303 	and.w	r3, r3, #3
 8000536:	2b01      	cmp	r3, #1
 8000538:	d006      	beq.n	8000548 <MCAL_RCC_GetSYS_CLKFreq+0x20>
 800053a:	2b01      	cmp	r3, #1
 800053c:	d302      	bcc.n	8000544 <MCAL_RCC_GetSYS_CLKFreq+0x1c>
 800053e:	2b02      	cmp	r3, #2
 8000540:	d004      	beq.n	800054c <MCAL_RCC_GetSYS_CLKFreq+0x24>
 8000542:	e005      	b.n	8000550 <MCAL_RCC_GetSYS_CLKFreq+0x28>
	{
	case 0:
		return HSI_RC_CLK;
 8000544:	4b06      	ldr	r3, [pc, #24]	; (8000560 <MCAL_RCC_GetSYS_CLKFreq+0x38>)
 8000546:	e004      	b.n	8000552 <MCAL_RCC_GetSYS_CLKFreq+0x2a>
		break;
	case 1:
		return HSE_RC_CLK;
 8000548:	4b06      	ldr	r3, [pc, #24]	; (8000564 <MCAL_RCC_GetSYS_CLKFreq+0x3c>)
 800054a:	e002      	b.n	8000552 <MCAL_RCC_GetSYS_CLKFreq+0x2a>
		break;
	case 2:
		return PLL_RC_CLK;
 800054c:	4b06      	ldr	r3, [pc, #24]	; (8000568 <MCAL_RCC_GetSYS_CLKFreq+0x40>)
 800054e:	e000      	b.n	8000552 <MCAL_RCC_GetSYS_CLKFreq+0x2a>
		break;
	default:
		return HSI_RC_CLK;
 8000550:	4b03      	ldr	r3, [pc, #12]	; (8000560 <MCAL_RCC_GetSYS_CLKFreq+0x38>)
		break;
	}
}
 8000552:	4618      	mov	r0, r3
 8000554:	46bd      	mov	sp, r7
 8000556:	bc80      	pop	{r7}
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	40021000 	.word	0x40021000
 8000560:	007a1200 	.word	0x007a1200
 8000564:	00f42400 	.word	0x00f42400
 8000568:	044aa200 	.word	0x044aa200

0800056c <MCAL_RCC_GetHCLKFreq>:
 * @param [in]	-none
 * @retval 		-HCLK value
 * Note			-none
 */
uint32_t MCAL_RCC_GetHCLKFreq(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
	// Get SYS_CLK source Compute HCLK Frequency
	return ( MCAL_RCC_GetSYS_CLKFreq() >> APBPrescTable[(RCC->CFGR >> 4) & 0b1111] );
 8000570:	f7ff ffda 	bl	8000528 <MCAL_RCC_GetSYS_CLKFreq>
 8000574:	4601      	mov	r1, r0
 8000576:	4b06      	ldr	r3, [pc, #24]	; (8000590 <MCAL_RCC_GetHCLKFreq+0x24>)
 8000578:	685b      	ldr	r3, [r3, #4]
 800057a:	091b      	lsrs	r3, r3, #4
 800057c:	f003 030f 	and.w	r3, r3, #15
 8000580:	4a04      	ldr	r2, [pc, #16]	; (8000594 <MCAL_RCC_GetHCLKFreq+0x28>)
 8000582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000586:	fa21 f303 	lsr.w	r3, r1, r3
}
 800058a:	4618      	mov	r0, r3
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	40021000 	.word	0x40021000
 8000594:	20000000 	.word	0x20000000

08000598 <MCAL_RCC_GetPCLK1Freq>:
 * @param [in]	-none
 * @retval 		-PCLK1 value
 * Note			-none
 */
uint32_t MCAL_RCC_GetPCLK1Freq(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
	// Get HCLK source Compute PCLK1 Frequency
	return ( MCAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR >> 8) & 0b111] );
 800059c:	f7ff ffe6 	bl	800056c <MCAL_RCC_GetHCLKFreq>
 80005a0:	4601      	mov	r1, r0
 80005a2:	4b06      	ldr	r3, [pc, #24]	; (80005bc <MCAL_RCC_GetPCLK1Freq+0x24>)
 80005a4:	685b      	ldr	r3, [r3, #4]
 80005a6:	0a1b      	lsrs	r3, r3, #8
 80005a8:	f003 0307 	and.w	r3, r3, #7
 80005ac:	4a04      	ldr	r2, [pc, #16]	; (80005c0 <MCAL_RCC_GetPCLK1Freq+0x28>)
 80005ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005b2:	fa21 f303 	lsr.w	r3, r1, r3
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40021000 	.word	0x40021000
 80005c0:	20000000 	.word	0x20000000

080005c4 <MCAL_RCC_GetPCLK2Freq>:
 * @param [in]	-none
 * @retval 		-PCLK2 value
 * Note			-none
 */
uint32_t MCAL_RCC_GetPCLK2Freq(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
	// Get HCLK source Compute PCLK2 Frequency
	return ( MCAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR >> 11) & 0b111] );
 80005c8:	f7ff ffd0 	bl	800056c <MCAL_RCC_GetHCLKFreq>
 80005cc:	4601      	mov	r1, r0
 80005ce:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <MCAL_RCC_GetPCLK2Freq+0x24>)
 80005d0:	685b      	ldr	r3, [r3, #4]
 80005d2:	0adb      	lsrs	r3, r3, #11
 80005d4:	f003 0307 	and.w	r3, r3, #7
 80005d8:	4a04      	ldr	r2, [pc, #16]	; (80005ec <MCAL_RCC_GetPCLK2Freq+0x28>)
 80005da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40021000 	.word	0x40021000
 80005ec:	20000000 	.word	0x20000000

080005f0 <MCAL_UART_Init>:
 * @param [in]	- UART_Cfg: All UART configuration
 * @retval 		- none
 * Note			- Only support asynch. mode & clock at 8 MHz
 */
void MCAL_UART_Init(USART_t* USARTx, UART_Config_t* UART_Cfg)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
 80005f8:	6039      	str	r1, [r7, #0]
	//0- save uart config in global variable
	if(USARTx == USART1)
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	4a61      	ldr	r2, [pc, #388]	; (8000784 <MCAL_UART_Init+0x194>)
 80005fe:	4293      	cmp	r3, r2
 8000600:	d103      	bne.n	800060a <MCAL_UART_Init+0x1a>
		GLOBAL_UART1_Config = UART_Cfg;
 8000602:	4a61      	ldr	r2, [pc, #388]	; (8000788 <MCAL_UART_Init+0x198>)
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	6013      	str	r3, [r2, #0]
 8000608:	e00a      	b.n	8000620 <MCAL_UART_Init+0x30>
	else if(USARTx == USART2)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	4a5f      	ldr	r2, [pc, #380]	; (800078c <MCAL_UART_Init+0x19c>)
 800060e:	4293      	cmp	r3, r2
 8000610:	d103      	bne.n	800061a <MCAL_UART_Init+0x2a>
		GLOBAL_UART2_Config = UART_Cfg;
 8000612:	4a5f      	ldr	r2, [pc, #380]	; (8000790 <MCAL_UART_Init+0x1a0>)
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	6013      	str	r3, [r2, #0]
 8000618:	e002      	b.n	8000620 <MCAL_UART_Init+0x30>
	else
		GLOBAL_UART3_Config = UART_Cfg;
 800061a:	4a5e      	ldr	r2, [pc, #376]	; (8000794 <MCAL_UART_Init+0x1a4>)
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	6013      	str	r3, [r2, #0]

	//1- enable UART peripheral
	if(USARTx == USART1)
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	4a58      	ldr	r2, [pc, #352]	; (8000784 <MCAL_UART_Init+0x194>)
 8000624:	4293      	cmp	r3, r2
 8000626:	d106      	bne.n	8000636 <MCAL_UART_Init+0x46>
		RCC_USART1_CLK_EN();
 8000628:	4b5b      	ldr	r3, [pc, #364]	; (8000798 <MCAL_UART_Init+0x1a8>)
 800062a:	699b      	ldr	r3, [r3, #24]
 800062c:	4a5a      	ldr	r2, [pc, #360]	; (8000798 <MCAL_UART_Init+0x1a8>)
 800062e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000632:	6193      	str	r3, [r2, #24]
 8000634:	e014      	b.n	8000660 <MCAL_UART_Init+0x70>
	else if(USARTx == USART2)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	4a54      	ldr	r2, [pc, #336]	; (800078c <MCAL_UART_Init+0x19c>)
 800063a:	4293      	cmp	r3, r2
 800063c:	d106      	bne.n	800064c <MCAL_UART_Init+0x5c>
		RCC_USART2_CLK_EN();
 800063e:	4b56      	ldr	r3, [pc, #344]	; (8000798 <MCAL_UART_Init+0x1a8>)
 8000640:	69db      	ldr	r3, [r3, #28]
 8000642:	4a55      	ldr	r2, [pc, #340]	; (8000798 <MCAL_UART_Init+0x1a8>)
 8000644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000648:	61d3      	str	r3, [r2, #28]
 800064a:	e009      	b.n	8000660 <MCAL_UART_Init+0x70>
	else if(USARTx == USART3)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	4a53      	ldr	r2, [pc, #332]	; (800079c <MCAL_UART_Init+0x1ac>)
 8000650:	4293      	cmp	r3, r2
 8000652:	d105      	bne.n	8000660 <MCAL_UART_Init+0x70>
		RCC_USART3_CLK_EN();
 8000654:	4b50      	ldr	r3, [pc, #320]	; (8000798 <MCAL_UART_Init+0x1a8>)
 8000656:	69db      	ldr	r3, [r3, #28]
 8000658:	4a4f      	ldr	r2, [pc, #316]	; (8000798 <MCAL_UART_Init+0x1a8>)
 800065a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800065e:	61d3      	str	r3, [r2, #28]

	//2- enable UART_CR module
	USARTx->CR1 |= (1 << 13);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	68db      	ldr	r3, [r3, #12]
 8000664:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	60da      	str	r2, [r3, #12]

	//3- enable UART_CR mode
	USARTx->CR1 |= UART_Cfg->USART_Mode;
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	68db      	ldr	r3, [r3, #12]
 8000670:	683a      	ldr	r2, [r7, #0]
 8000672:	7812      	ldrb	r2, [r2, #0]
 8000674:	431a      	orrs	r2, r3
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	60da      	str	r2, [r3, #12]

	//4- enable UART_CR payload
	USARTx->CR1 |= UART_Cfg->PayLoad;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	68db      	ldr	r3, [r3, #12]
 800067e:	683a      	ldr	r2, [r7, #0]
 8000680:	7a12      	ldrb	r2, [r2, #8]
 8000682:	431a      	orrs	r2, r3
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	60da      	str	r2, [r3, #12]

	//5- enable UART_CR parity
	USARTx->CR1 |= UART_Cfg->Parity;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	68db      	ldr	r3, [r3, #12]
 800068c:	683a      	ldr	r2, [r7, #0]
 800068e:	7a52      	ldrb	r2, [r2, #9]
 8000690:	431a      	orrs	r2, r3
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	60da      	str	r2, [r3, #12]

	//6- enable UART_CR2 stop bits
	USARTx->CR2 |= UART_Cfg->StopBit;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	691b      	ldr	r3, [r3, #16]
 800069a:	683a      	ldr	r2, [r7, #0]
 800069c:	7a92      	ldrb	r2, [r2, #10]
 800069e:	431a      	orrs	r2, r3
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	611a      	str	r2, [r3, #16]

	//7- enable UART_CR3 flow ctrl
	USARTx->CR3 |= UART_Cfg->HW_Flow_CTRL;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	695b      	ldr	r3, [r3, #20]
 80006a8:	683a      	ldr	r2, [r7, #0]
 80006aa:	7ad2      	ldrb	r2, [r2, #11]
 80006ac:	431a      	orrs	r2, r3
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	615a      	str	r2, [r3, #20]

	//8- Configure BRR value
	if(USARTx == USART1)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	4a33      	ldr	r2, [pc, #204]	; (8000784 <MCAL_UART_Init+0x194>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d105      	bne.n	80006c6 <MCAL_UART_Init+0xd6>
	{
		Pclk = MCAL_RCC_GetPCLK2Freq();
 80006ba:	f7ff ff83 	bl	80005c4 <MCAL_RCC_GetPCLK2Freq>
 80006be:	4602      	mov	r2, r0
 80006c0:	4b37      	ldr	r3, [pc, #220]	; (80007a0 <MCAL_UART_Init+0x1b0>)
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	e004      	b.n	80006d0 <MCAL_UART_Init+0xe0>
	}
	else
	{
		Pclk = MCAL_RCC_GetPCLK1Freq();
 80006c6:	f7ff ff67 	bl	8000598 <MCAL_RCC_GetPCLK1Freq>
 80006ca:	4602      	mov	r2, r0
 80006cc:	4b34      	ldr	r3, [pc, #208]	; (80007a0 <MCAL_UART_Init+0x1b0>)
 80006ce:	601a      	str	r2, [r3, #0]
	}
	USARTx->BRR = USART_BRR_Register(Pclk, UART_Cfg->BaudRate);
 80006d0:	4b33      	ldr	r3, [pc, #204]	; (80007a0 <MCAL_UART_Init+0x1b0>)
 80006d2:	681a      	ldr	r2, [r3, #0]
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	685b      	ldr	r3, [r3, #4]
 80006d8:	011b      	lsls	r3, r3, #4
 80006da:	fbb2 f3f3 	udiv	r3, r2, r3
 80006de:	0119      	lsls	r1, r3, #4
 80006e0:	4b2f      	ldr	r3, [pc, #188]	; (80007a0 <MCAL_UART_Init+0x1b0>)
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	4613      	mov	r3, r2
 80006e6:	009b      	lsls	r3, r3, #2
 80006e8:	4413      	add	r3, r2
 80006ea:	009a      	lsls	r2, r3, #2
 80006ec:	441a      	add	r2, r3
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	685b      	ldr	r3, [r3, #4]
 80006f2:	009b      	lsls	r3, r3, #2
 80006f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80006f8:	4b29      	ldr	r3, [pc, #164]	; (80007a0 <MCAL_UART_Init+0x1b0>)
 80006fa:	6818      	ldr	r0, [r3, #0]
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	685b      	ldr	r3, [r3, #4]
 8000700:	011b      	lsls	r3, r3, #4
 8000702:	fbb0 f3f3 	udiv	r3, r0, r3
 8000706:	2064      	movs	r0, #100	; 0x64
 8000708:	fb00 f303 	mul.w	r3, r0, r3
 800070c:	1ad3      	subs	r3, r2, r3
 800070e:	011b      	lsls	r3, r3, #4
 8000710:	4a24      	ldr	r2, [pc, #144]	; (80007a4 <MCAL_UART_Init+0x1b4>)
 8000712:	fba2 2303 	umull	r2, r3, r2, r3
 8000716:	095b      	lsrs	r3, r3, #5
 8000718:	f003 030f 	and.w	r3, r3, #15
 800071c:	ea41 0203 	orr.w	r2, r1, r3
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	609a      	str	r2, [r3, #8]

	//9- enable UART interrupt and NVIC
	if(UART_Cfg->IRQ_EN != USART_IRQ__EN_NONE)
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	7b1b      	ldrb	r3, [r3, #12]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d026      	beq.n	800077a <MCAL_UART_Init+0x18a>
	{
		USARTx->CR1 |= UART_Cfg->IRQ_EN;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	68db      	ldr	r3, [r3, #12]
 8000730:	683a      	ldr	r2, [r7, #0]
 8000732:	7b12      	ldrb	r2, [r2, #12]
 8000734:	431a      	orrs	r2, r3
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	60da      	str	r2, [r3, #12]

		if(USARTx == USART1)
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	4a11      	ldr	r2, [pc, #68]	; (8000784 <MCAL_UART_Init+0x194>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d106      	bne.n	8000750 <MCAL_UART_Init+0x160>
			NVIC_USART1_IRQ37_Enable();
 8000742:	4b19      	ldr	r3, [pc, #100]	; (80007a8 <MCAL_UART_Init+0x1b8>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4a18      	ldr	r2, [pc, #96]	; (80007a8 <MCAL_UART_Init+0x1b8>)
 8000748:	f043 0320 	orr.w	r3, r3, #32
 800074c:	6013      	str	r3, [r2, #0]
		else if(USARTx == USART2)
			NVIC_USART2_IRQ38_Enable();
		else if(USARTx == USART3)
			NVIC_USART3_IRQ39_Enable();
	}
}
 800074e:	e014      	b.n	800077a <MCAL_UART_Init+0x18a>
		else if(USARTx == USART2)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	4a0e      	ldr	r2, [pc, #56]	; (800078c <MCAL_UART_Init+0x19c>)
 8000754:	4293      	cmp	r3, r2
 8000756:	d106      	bne.n	8000766 <MCAL_UART_Init+0x176>
			NVIC_USART2_IRQ38_Enable();
 8000758:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <MCAL_UART_Init+0x1b8>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a12      	ldr	r2, [pc, #72]	; (80007a8 <MCAL_UART_Init+0x1b8>)
 800075e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000762:	6013      	str	r3, [r2, #0]
}
 8000764:	e009      	b.n	800077a <MCAL_UART_Init+0x18a>
		else if(USARTx == USART3)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	4a0c      	ldr	r2, [pc, #48]	; (800079c <MCAL_UART_Init+0x1ac>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d105      	bne.n	800077a <MCAL_UART_Init+0x18a>
			NVIC_USART3_IRQ39_Enable();
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MCAL_UART_Init+0x1b8>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4a0d      	ldr	r2, [pc, #52]	; (80007a8 <MCAL_UART_Init+0x1b8>)
 8000774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000778:	6013      	str	r3, [r2, #0]
}
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40013800 	.word	0x40013800
 8000788:	2000003c 	.word	0x2000003c
 800078c:	40004400 	.word	0x40004400
 8000790:	20000040 	.word	0x20000040
 8000794:	20000044 	.word	0x20000044
 8000798:	40021000 	.word	0x40021000
 800079c:	40004800 	.word	0x40004800
 80007a0:	20000088 	.word	0x20000088
 80007a4:	51eb851f 	.word	0x51eb851f
 80007a8:	e000e104 	.word	0xe000e104

080007ac <MCAL_UART_GPIO_SetPins>:
 * @param [in]	- USARTx: where x can be (1..3 depending on device used)
 * @retval 		- none
 * Note			- Only support asynch. mode & clock at 8 MHz
 */
void MCAL_UART_GPIO_SetPins(USART_t* USARTx)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PinCfg;

	if(USARTx == USART1)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	4a2b      	ldr	r2, [pc, #172]	; (8000864 <MCAL_UART_GPIO_SetPins+0xb8>)
 80007b8:	4293      	cmp	r3, r2
 80007ba:	d118      	bne.n	80007ee <MCAL_UART_GPIO_SetPins+0x42>
		//PA10 RX
		//PA11 CTS
		//PA12 RTS

		//PA9 TX
		PinCfg.GPIO_PinNumber = GPIO_PIN_9;
 80007bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007c0:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 80007c2:	2306      	movs	r3, #6
 80007c4:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80007c6:	2301      	movs	r3, #1
 80007c8:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 80007ca:	f107 030c 	add.w	r3, r7, #12
 80007ce:	4619      	mov	r1, r3
 80007d0:	4825      	ldr	r0, [pc, #148]	; (8000868 <MCAL_UART_GPIO_SetPins+0xbc>)
 80007d2:	f7ff fe40 	bl	8000456 <MCAL_GPIO_Init>

		//PA10 RX
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 80007d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007da:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_MODE_AF_INPUT;
 80007dc:	2301      	movs	r3, #1
 80007de:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 80007e0:	f107 030c 	add.w	r3, r7, #12
 80007e4:	4619      	mov	r1, r3
 80007e6:	4820      	ldr	r0, [pc, #128]	; (8000868 <MCAL_UART_GPIO_SetPins+0xbc>)
 80007e8:	f7ff fe35 	bl	8000456 <MCAL_GPIO_Init>
			PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
			PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
			MCAL_GPIO_Init(GPIOB, &PinCfg);
		}
	}
}
 80007ec:	e036      	b.n	800085c <MCAL_UART_GPIO_SetPins+0xb0>
	else if(USARTx == USART2)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	4a1e      	ldr	r2, [pc, #120]	; (800086c <MCAL_UART_GPIO_SetPins+0xc0>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d116      	bne.n	8000824 <MCAL_UART_GPIO_SetPins+0x78>
		PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 80007f6:	2304      	movs	r3, #4
 80007f8:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 80007fa:	2306      	movs	r3, #6
 80007fc:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80007fe:	2301      	movs	r3, #1
 8000800:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000802:	f107 030c 	add.w	r3, r7, #12
 8000806:	4619      	mov	r1, r3
 8000808:	4817      	ldr	r0, [pc, #92]	; (8000868 <MCAL_UART_GPIO_SetPins+0xbc>)
 800080a:	f7ff fe24 	bl	8000456 <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 800080e:	2308      	movs	r3, #8
 8000810:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_MODE_AF_INPUT;
 8000812:	2301      	movs	r3, #1
 8000814:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000816:	f107 030c 	add.w	r3, r7, #12
 800081a:	4619      	mov	r1, r3
 800081c:	4812      	ldr	r0, [pc, #72]	; (8000868 <MCAL_UART_GPIO_SetPins+0xbc>)
 800081e:	f7ff fe1a 	bl	8000456 <MCAL_GPIO_Init>
}
 8000822:	e01b      	b.n	800085c <MCAL_UART_GPIO_SetPins+0xb0>
	else if(USARTx == USART3)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	4a12      	ldr	r2, [pc, #72]	; (8000870 <MCAL_UART_GPIO_SetPins+0xc4>)
 8000828:	4293      	cmp	r3, r2
 800082a:	d117      	bne.n	800085c <MCAL_UART_GPIO_SetPins+0xb0>
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 800082c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000830:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 8000832:	2306      	movs	r3, #6
 8000834:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000836:	2301      	movs	r3, #1
 8000838:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 800083a:	f107 030c 	add.w	r3, r7, #12
 800083e:	4619      	mov	r1, r3
 8000840:	480c      	ldr	r0, [pc, #48]	; (8000874 <MCAL_UART_GPIO_SetPins+0xc8>)
 8000842:	f7ff fe08 	bl	8000456 <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_11;
 8000846:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800084a:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_MODE_AF_INPUT;
 800084c:	2301      	movs	r3, #1
 800084e:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000850:	f107 030c 	add.w	r3, r7, #12
 8000854:	4619      	mov	r1, r3
 8000856:	4807      	ldr	r0, [pc, #28]	; (8000874 <MCAL_UART_GPIO_SetPins+0xc8>)
 8000858:	f7ff fdfd 	bl	8000456 <MCAL_GPIO_Init>
}
 800085c:	bf00      	nop
 800085e:	3710      	adds	r7, #16
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40013800 	.word	0x40013800
 8000868:	40010800 	.word	0x40010800
 800086c:	40004400 	.word	0x40004400
 8000870:	40004800 	.word	0x40004800
 8000874:	40010c00 	.word	0x40010c00

08000878 <MCAL_UART_SendData>:
 * @param [in]	- PollingEn: define if the pooling is enable or not
 * @retval 		- none
 * Note			- Only support asynch. mode & clock at 8 MHz
 */
void MCAL_UART_SendData(USART_t* USARTx, uint16_t* pTxBuffer, enum Polling_mechanism PollingEn)
{
 8000878:	b480      	push	{r7}
 800087a:	b087      	sub	sp, #28
 800087c:	af00      	add	r7, sp, #0
 800087e:	60f8      	str	r0, [r7, #12]
 8000880:	60b9      	str	r1, [r7, #8]
 8000882:	4613      	mov	r3, r2
 8000884:	71fb      	strb	r3, [r7, #7]

	//1. wait TXE flag in SR until to be set
	if(PollingEn == enable)
 8000886:	79fb      	ldrb	r3, [r7, #7]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d106      	bne.n	800089a <MCAL_UART_SendData+0x22>
		while(!(USARTx->SR & 1<<7));
 800088c:	bf00      	nop
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000896:	2b00      	cmp	r3, #0
 8000898:	d0f9      	beq.n	800088e <MCAL_UART_SendData+0x16>

	//0. select which USARTx
	UART_Config_t* USARTx_Config = NULL;
 800089a:	2300      	movs	r3, #0
 800089c:	617b      	str	r3, [r7, #20]
	if(USARTx == USART1)
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	4a0f      	ldr	r2, [pc, #60]	; (80008e0 <MCAL_UART_SendData+0x68>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d103      	bne.n	80008ae <MCAL_UART_SendData+0x36>
		USARTx_Config = GLOBAL_UART1_Config;
 80008a6:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <MCAL_UART_SendData+0x6c>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	617b      	str	r3, [r7, #20]
 80008ac:	e00e      	b.n	80008cc <MCAL_UART_SendData+0x54>
	else if(USARTx == USART2)
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	4a0d      	ldr	r2, [pc, #52]	; (80008e8 <MCAL_UART_SendData+0x70>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d103      	bne.n	80008be <MCAL_UART_SendData+0x46>
		USARTx_Config = GLOBAL_UART2_Config;
 80008b6:	4b0d      	ldr	r3, [pc, #52]	; (80008ec <MCAL_UART_SendData+0x74>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	617b      	str	r3, [r7, #20]
 80008bc:	e006      	b.n	80008cc <MCAL_UART_SendData+0x54>
	else if(USARTx == USART3)
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	4a0b      	ldr	r2, [pc, #44]	; (80008f0 <MCAL_UART_SendData+0x78>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d102      	bne.n	80008cc <MCAL_UART_SendData+0x54>
		USARTx_Config = GLOBAL_UART3_Config;
 80008c6:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <MCAL_UART_SendData+0x7c>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	617b      	str	r3, [r7, #20]
	{
		USARTx->DR = (*pTxBuffer & (uint16_t) 0x01FF);
	}
	else //8 bit word length
	{
		USARTx->DR = (*pTxBuffer & (uint16_t) 0xFF);
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	881b      	ldrh	r3, [r3, #0]
 80008d0:	b2da      	uxtb	r2, r3
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	605a      	str	r2, [r3, #4]
	}
}
 80008d6:	bf00      	nop
 80008d8:	371c      	adds	r7, #28
 80008da:	46bd      	mov	sp, r7
 80008dc:	bc80      	pop	{r7}
 80008de:	4770      	bx	lr
 80008e0:	40013800 	.word	0x40013800
 80008e4:	2000003c 	.word	0x2000003c
 80008e8:	40004400 	.word	0x40004400
 80008ec:	20000040 	.word	0x20000040
 80008f0:	40004800 	.word	0x40004800
 80008f4:	20000044 	.word	0x20000044

080008f8 <MCAL_UART_ReceiveData>:

void MCAL_UART_ReceiveData(USART_t* USARTx, uint16_t* pRxBuffer, enum Polling_mechanism PollingEn)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b087      	sub	sp, #28
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	60f8      	str	r0, [r7, #12]
 8000900:	60b9      	str	r1, [r7, #8]
 8000902:	4613      	mov	r3, r2
 8000904:	71fb      	strb	r3, [r7, #7]
	//0. wait TXE flag in SR until to be set
	if(PollingEn == enable)
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d106      	bne.n	800091a <MCAL_UART_ReceiveData+0x22>
		while(!(USARTx->SR & 1<<5));
 800090c:	bf00      	nop
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	f003 0320 	and.w	r3, r3, #32
 8000916:	2b00      	cmp	r3, #0
 8000918:	d0f9      	beq.n	800090e <MCAL_UART_ReceiveData+0x16>

	//1. select which USARTx
	UART_Config_t* USARTx_Config = NULL;
 800091a:	2300      	movs	r3, #0
 800091c:	617b      	str	r3, [r7, #20]
	if(USARTx == USART1)
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	4a17      	ldr	r2, [pc, #92]	; (8000980 <MCAL_UART_ReceiveData+0x88>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d103      	bne.n	800092e <MCAL_UART_ReceiveData+0x36>
		USARTx_Config = GLOBAL_UART1_Config;
 8000926:	4b17      	ldr	r3, [pc, #92]	; (8000984 <MCAL_UART_ReceiveData+0x8c>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	617b      	str	r3, [r7, #20]
 800092c:	e00e      	b.n	800094c <MCAL_UART_ReceiveData+0x54>
	else if(USARTx == USART2)
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	4a15      	ldr	r2, [pc, #84]	; (8000988 <MCAL_UART_ReceiveData+0x90>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d103      	bne.n	800093e <MCAL_UART_ReceiveData+0x46>
		USARTx_Config = GLOBAL_UART2_Config;
 8000936:	4b15      	ldr	r3, [pc, #84]	; (800098c <MCAL_UART_ReceiveData+0x94>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	617b      	str	r3, [r7, #20]
 800093c:	e006      	b.n	800094c <MCAL_UART_ReceiveData+0x54>
	else if(USARTx == USART3)
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	4a13      	ldr	r2, [pc, #76]	; (8000990 <MCAL_UART_ReceiveData+0x98>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d102      	bne.n	800094c <MCAL_UART_ReceiveData+0x54>
		USARTx_Config = GLOBAL_UART3_Config;
 8000946:	4b13      	ldr	r3, [pc, #76]	; (8000994 <MCAL_UART_ReceiveData+0x9c>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	617b      	str	r3, [r7, #20]
			*((uint16_t*) pRxBuffer) = (USARTx->DR & (uint8_t) 0xFF);
	}

	else //8 bit word length
	{
		if(USARTx_Config->Parity == USART_PARITY_NONE)
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	7a5b      	ldrb	r3, [r3, #9]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d107      	bne.n	8000964 <MCAL_UART_ReceiveData+0x6c>
			*((uint16_t*) pRxBuffer) = (USARTx->DR & (uint8_t) 0xFF);
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	b29b      	uxth	r3, r3
 800095a:	b2db      	uxtb	r3, r3
 800095c:	b29a      	uxth	r2, r3
 800095e:	68bb      	ldr	r3, [r7, #8]
 8000960:	801a      	strh	r2, [r3, #0]

		else //parity ON
			*((uint16_t*) pRxBuffer) = (USARTx->DR & (uint8_t) 0x7F);
	}

}
 8000962:	e007      	b.n	8000974 <MCAL_UART_ReceiveData+0x7c>
			*((uint16_t*) pRxBuffer) = (USARTx->DR & (uint8_t) 0x7F);
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	685b      	ldr	r3, [r3, #4]
 8000968:	b29b      	uxth	r3, r3
 800096a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800096e:	b29a      	uxth	r2, r3
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	801a      	strh	r2, [r3, #0]
}
 8000974:	bf00      	nop
 8000976:	371c      	adds	r7, #28
 8000978:	46bd      	mov	sp, r7
 800097a:	bc80      	pop	{r7}
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	40013800 	.word	0x40013800
 8000984:	2000003c 	.word	0x2000003c
 8000988:	40004400 	.word	0x40004400
 800098c:	20000040 	.word	0x20000040
 8000990:	40004800 	.word	0x40004800
 8000994:	20000044 	.word	0x20000044

08000998 <USART1_IRQHandler>:
 * 								ISR Functions
 * =========================================================================
 */

void USART1_IRQHandler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
	GLOBAL_UART1_Config->IRQ_CallBack();
 800099c:	4b02      	ldr	r3, [pc, #8]	; (80009a8 <USART1_IRQHandler+0x10>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	691b      	ldr	r3, [r3, #16]
 80009a2:	4798      	blx	r3
}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	2000003c 	.word	0x2000003c

080009ac <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
	GLOBAL_UART2_Config->IRQ_CallBack();
 80009b0:	4b02      	ldr	r3, [pc, #8]	; (80009bc <USART2_IRQHandler+0x10>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	691b      	ldr	r3, [r3, #16]
 80009b6:	4798      	blx	r3
}
 80009b8:	bf00      	nop
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	20000040 	.word	0x20000040

080009c0 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
	GLOBAL_UART3_Config->IRQ_CallBack();
 80009c4:	4b02      	ldr	r3, [pc, #8]	; (80009d0 <USART3_IRQHandler+0x10>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	691b      	ldr	r3, [r3, #16]
 80009ca:	4798      	blx	r3
}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	20000044 	.word	0x20000044

080009d4 <main>:
}



int main(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b086      	sub	sp, #24
 80009d8:	af00      	add	r7, sp, #0

	uint16_t ch;
	UART_Config_t uartCfg;
	uartCfg.BaudRate = USART_BAUDRATE_115200;
 80009da:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80009de:	607b      	str	r3, [r7, #4]
	uartCfg.HW_Flow_CTRL = HW_FLOW_CTRL_CTS_NONE;
 80009e0:	2300      	movs	r3, #0
 80009e2:	72fb      	strb	r3, [r7, #11]
	uartCfg.IRQ_EN = USART_IRQ__EN_NONE;
 80009e4:	2300      	movs	r3, #0
 80009e6:	733b      	strb	r3, [r7, #12]
	uartCfg.IRQ_CallBack = NULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	613b      	str	r3, [r7, #16]
	uartCfg.Parity = USART_PARITY_NONE;
 80009ec:	2300      	movs	r3, #0
 80009ee:	727b      	strb	r3, [r7, #9]
	uartCfg.PayLoad = USART_PAYLOAD_8B;
 80009f0:	2300      	movs	r3, #0
 80009f2:	723b      	strb	r3, [r7, #8]
	uartCfg.StopBit = UASRT_STOPBIT_1;
 80009f4:	2300      	movs	r3, #0
 80009f6:	72bb      	strb	r3, [r7, #10]
	uartCfg.USART_Mode = USART_MODE_Tx_Rx;
 80009f8:	230c      	movs	r3, #12
 80009fa:	703b      	strb	r3, [r7, #0]

	MCAL_UART_Init(USART1, &uartCfg);
 80009fc:	463b      	mov	r3, r7
 80009fe:	4619      	mov	r1, r3
 8000a00:	480a      	ldr	r0, [pc, #40]	; (8000a2c <main+0x58>)
 8000a02:	f7ff fdf5 	bl	80005f0 <MCAL_UART_Init>
	MCAL_UART_GPIO_SetPins(USART1);
 8000a06:	4809      	ldr	r0, [pc, #36]	; (8000a2c <main+0x58>)
 8000a08:	f7ff fed0 	bl	80007ac <MCAL_UART_GPIO_SetPins>

    /* Loop forever */
	while(1)
	{
		MCAL_UART_ReceiveData(USART1, &ch, enable);
 8000a0c:	f107 0316 	add.w	r3, r7, #22
 8000a10:	2200      	movs	r2, #0
 8000a12:	4619      	mov	r1, r3
 8000a14:	4805      	ldr	r0, [pc, #20]	; (8000a2c <main+0x58>)
 8000a16:	f7ff ff6f 	bl	80008f8 <MCAL_UART_ReceiveData>

		MCAL_UART_SendData(USART1, &ch, enable);
 8000a1a:	f107 0316 	add.w	r3, r7, #22
 8000a1e:	2200      	movs	r2, #0
 8000a20:	4619      	mov	r1, r3
 8000a22:	4802      	ldr	r0, [pc, #8]	; (8000a2c <main+0x58>)
 8000a24:	f7ff ff28 	bl	8000878 <MCAL_UART_SendData>
		MCAL_UART_ReceiveData(USART1, &ch, enable);
 8000a28:	e7f0      	b.n	8000a0c <main+0x38>
 8000a2a:	bf00      	nop
 8000a2c:	40013800 	.word	0x40013800

08000a30 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a30:	480d      	ldr	r0, [pc, #52]	; (8000a68 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a32:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a34:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a38:	480c      	ldr	r0, [pc, #48]	; (8000a6c <LoopForever+0x6>)
  ldr r1, =_edata
 8000a3a:	490d      	ldr	r1, [pc, #52]	; (8000a70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a3c:	4a0d      	ldr	r2, [pc, #52]	; (8000a74 <LoopForever+0xe>)
  movs r3, #0
 8000a3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a40:	e002      	b.n	8000a48 <LoopCopyDataInit>

08000a42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a46:	3304      	adds	r3, #4

08000a48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a4c:	d3f9      	bcc.n	8000a42 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a4e:	4a0a      	ldr	r2, [pc, #40]	; (8000a78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a50:	4c0a      	ldr	r4, [pc, #40]	; (8000a7c <LoopForever+0x16>)
  movs r3, #0
 8000a52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a54:	e001      	b.n	8000a5a <LoopFillZerobss>

08000a56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a58:	3204      	adds	r2, #4

08000a5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a5c:	d3fb      	bcc.n	8000a56 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a5e:	f000 f811 	bl	8000a84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a62:	f7ff ffb7 	bl	80009d4 <main>

08000a66 <LoopForever>:

LoopForever:
    b LoopForever
 8000a66:	e7fe      	b.n	8000a66 <LoopForever>
  ldr   r0, =_estack
 8000a68:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000a6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a70:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000a74:	08000aec 	.word	0x08000aec
  ldr r2, =_sbss
 8000a78:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000a7c:	2000008c 	.word	0x2000008c

08000a80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a80:	e7fe      	b.n	8000a80 <ADC1_2_IRQHandler>
	...

08000a84 <__libc_init_array>:
 8000a84:	b570      	push	{r4, r5, r6, lr}
 8000a86:	2500      	movs	r5, #0
 8000a88:	4e0c      	ldr	r6, [pc, #48]	; (8000abc <__libc_init_array+0x38>)
 8000a8a:	4c0d      	ldr	r4, [pc, #52]	; (8000ac0 <__libc_init_array+0x3c>)
 8000a8c:	1ba4      	subs	r4, r4, r6
 8000a8e:	10a4      	asrs	r4, r4, #2
 8000a90:	42a5      	cmp	r5, r4
 8000a92:	d109      	bne.n	8000aa8 <__libc_init_array+0x24>
 8000a94:	f000 f81a 	bl	8000acc <_init>
 8000a98:	2500      	movs	r5, #0
 8000a9a:	4e0a      	ldr	r6, [pc, #40]	; (8000ac4 <__libc_init_array+0x40>)
 8000a9c:	4c0a      	ldr	r4, [pc, #40]	; (8000ac8 <__libc_init_array+0x44>)
 8000a9e:	1ba4      	subs	r4, r4, r6
 8000aa0:	10a4      	asrs	r4, r4, #2
 8000aa2:	42a5      	cmp	r5, r4
 8000aa4:	d105      	bne.n	8000ab2 <__libc_init_array+0x2e>
 8000aa6:	bd70      	pop	{r4, r5, r6, pc}
 8000aa8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000aac:	4798      	blx	r3
 8000aae:	3501      	adds	r5, #1
 8000ab0:	e7ee      	b.n	8000a90 <__libc_init_array+0xc>
 8000ab2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ab6:	4798      	blx	r3
 8000ab8:	3501      	adds	r5, #1
 8000aba:	e7f2      	b.n	8000aa2 <__libc_init_array+0x1e>
 8000abc:	08000ae4 	.word	0x08000ae4
 8000ac0:	08000ae4 	.word	0x08000ae4
 8000ac4:	08000ae4 	.word	0x08000ae4
 8000ac8:	08000ae8 	.word	0x08000ae8

08000acc <_init>:
 8000acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ace:	bf00      	nop
 8000ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ad2:	bc08      	pop	{r3}
 8000ad4:	469e      	mov	lr, r3
 8000ad6:	4770      	bx	lr

08000ad8 <_fini>:
 8000ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ada:	bf00      	nop
 8000adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ade:	bc08      	pop	{r3}
 8000ae0:	469e      	mov	lr, r3
 8000ae2:	4770      	bx	lr
